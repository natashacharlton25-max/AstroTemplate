---
// src/components/Accessibility/AccessibilityPanel.astro
---

<!-- Accessibility Panel (initially hidden) -->
<div id="accessibilityPanel" class="accessibility-popup-overlay">
  <div class="accessibility-popup-container">
    <!-- Header -->
    <div class="accessibility-header">
      <div class="accessibility-header-content">
        <div class="accessibility-logo">
          <svg class="accessibility-icon" viewBox="0 0 24 24" fill="currentColor">
            <circle cx="12" cy="12" r="10"></circle>
            <circle cx="12" cy="8" r="2"></circle>
            <path d="M12 14v6M8 18h8"></path>
          </svg>
          <h2>Accessibility Options</h2>
        </div>
        <button id="closeAccessibilityPanel" class="close-accessibility-btn" aria-label="Close accessibility options">
          ✕
        </button>
      </div>
      <p class="accessibility-description">
        Customize your browsing experience with these helpful tools
      </p>
    </div>

    <!-- Panel Content -->
    <div class="accessibility-content">
      
      <!-- Site Assists Section -->
      <section class="accessibility-section">
        <h3 class="section-title">Site Assists</h3>
        <p class="section-description">Optional enhancements that work alongside your existing tools</p>
        
        <div class="accessibility-controls">
          <!-- Keyboard Helpers -->
          <div class="control-item">
            <div class="control-info">
              <label for="keyboardHelpers" class="control-label">Keyboard Helpers</label>
              <p class="control-description">Enhanced focus indicators and arrow-key navigation</p>
            </div>
            <label class="toggle-switch">
              <input 
                type="checkbox" 
                id="keyboardHelpers"
                data-setting="keyboardHelpers"
                aria-describedby="keyboard-help-desc">
              <span class="toggle-slider"></span>
            </label>
          </div>

          <!-- Screen Reader Helpers -->
          <div class="control-item">
            <div class="control-info">
              <label for="screenReaderHelpers" class="control-label">Screen Reader Helpers</label>
              <p class="control-description">Additional announcements and navigation hints</p>
            </div>
            <label class="toggle-switch">
              <input 
                type="checkbox" 
                id="screenReaderHelpers"
                data-setting="screenReaderHelpers"
                aria-describedby="screen-reader-help-desc">
              <span class="toggle-slider"></span>
            </label>
          </div>
        </div>
      </section>

      <!-- Plain Text Reading Mode -->
      <section class="accessibility-section">
        <h3 class="section-title">Reading Mode</h3>
        <p class="section-description">Simplified layout for focused reading</p>
        
        <div class="plain-text-controls">
          <!-- Plain Text Mode Toggle -->
          <div class="plain-text-main">
            <button 
              id="plainTextToggle"
              class="plain-text-btn"
              data-setting="plainTextMode"
              aria-pressed="false">
              <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"/>
              </svg>
              <span>Toggle Plain Text Mode</span>
            </button>
            <p class="keyboard-shortcut">Press <kbd>T</kbd> to toggle</p>
          </div>

          <!-- Plain Text Customization (shown when mode is active) -->
          <div id="plainTextCustomization" class="plain-text-customization" style="display: none;">
            
            <!-- Font Size -->
            <div class="customization-group">
              <label for="fontSize" class="customization-label">
                Font Size: <span id="fontSizeValue">100%</span>
              </label>
              <input 
                type="range" 
                id="fontSize" 
                min="75" 
                max="200" 
                value="100" 
                step="25"
                class="range-slider"
                data-setting="fontSize">
              <div class="range-labels">
                <span>75%</span>
                <span>100%</span>
                <span>125%</span>
                <span>150%</span>
                <span>200%</span>
              </div>
            </div>

            <!-- Line Spacing -->
            <div class="customization-group">
              <label for="lineSpacing" class="customization-label">
                Line Spacing: <span id="lineSpacingValue">160%</span>
              </label>
              <input 
                type="range" 
                id="lineSpacing" 
                min="120" 
                max="300" 
                value="160" 
                step="20"
                class="range-slider"
                data-setting="lineSpacing">
              <div class="range-labels">
                <span>120%</span>
                <span>200%</span>
                <span>300%</span>
              </div>
            </div>

            <!-- Font Family -->
            <div class="customization-group">
              <label for="fontFamily" class="customization-label">Reading Font</label>
              <select id="fontFamily" class="font-select" data-setting="fontFamily">
                <option value="default">Default Font</option>
                <option value="atkinson">Atkinson Hyperlegible</option>
                <option value="opendyslexic">OpenDyslexic</option>
              </select>
            </div>

            <!-- Background Color -->
            <div class="customization-group">
              <label class="customization-label">Background Color</label>
              <div class="color-options">
                <label class="color-option">
                  <input type="radio" name="backgroundColor" value="white" data-setting="backgroundColor" checked>
                  <span class="color-swatch" style="background: #ffffff; border: 2px solid #e0e0e0;"></span>
                  <span class="color-label">White</span>
                </label>
                <label class="color-option">
                  <input type="radio" name="backgroundColor" value="cream" data-setting="backgroundColor">
                  <span class="color-swatch" style="background: #f5f5dc;"></span>
                  <span class="color-label">Cream</span>
                </label>
                <label class="color-option">
                  <input type="radio" name="backgroundColor" value="blue" data-setting="backgroundColor">
                  <span class="color-swatch" style="background: #e6f3ff;"></span>
                  <span class="color-label">Blue</span>
                </label>
                <label class="color-option">
                  <input type="radio" name="backgroundColor" value="pink" data-setting="backgroundColor">
                  <span class="color-swatch" style="background: #ffe6f0;"></span>
                  <span class="color-label">Pink</span>
                </label>
              </div>
            </div>

          </div>
        </div>
      </section>

      <!-- Feedback Section -->
      <section class="accessibility-section">
        <h3 class="section-title">Help Us Improve</h3>
        <p class="section-description">Your feedback helps us make our website better for everyone</p>
        
        <div class="feedback-actions">
          <a 
            href="mailto:hello@icthemoon.com?subject=Accessibility%20Feature%20Request" 
            class="feedback-link"
            target="_blank"
            rel="noopener noreferrer">
            <svg class="link-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"/>
            </svg>
            Request an Accessibility Feature
          </a>
          
          <button 
            id="shareAccessibilityTips" 
            class="feedback-link feedback-button"
            type="button">
            <svg class="link-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"/>
            </svg>
            Share Accessibility Tips
          </button>
        </div>
      </section>

    </div>

    <!-- Panel Footer -->
    <div class="accessibility-footer">
      <p class="footer-note">
        These settings are saved locally and work alongside your existing assistive technologies.
      </p>
      <div class="footer-links">
        <a href="/accessibility-statement" class="footer-link">Accessibility Statement</a>
        <span class="footer-separator">•</span>
        <button id="resetAccessibilitySettings" class="footer-link footer-button" type="button">
          Reset All Settings
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Live region for announcements (only active when screen reader helpers enabled) -->
<div 
  id="accessibilityLiveRegion" 
  class="sr-only" 
  aria-live="polite" 
  aria-atomic="true">
</div>

<style>
  @import './accessabilityPanel.css';
</style>

<script>
// Inline the JavaScript to ensure it loads properly
class AccessibilityPanel {
  constructor() {
    this.panel = document.getElementById('accessibilityPanel');
    this.closeBtn = document.getElementById('closeAccessibilityPanel');
    this.plainTextToggle = document.getElementById('plainTextToggle');
    this.plainTextCustomization = document.getElementById('plainTextCustomization');
    this.liveRegion = document.getElementById('accessibilityLiveRegion');
    
    // Load settings from localStorage
    this.settings = {
      keyboardHelpers: localStorage.getItem('accessibility-keyboardHelpers') === 'true',
      screenReaderHelpers: localStorage.getItem('accessibility-screenReaderHelpers') === 'true',
      plainTextMode: localStorage.getItem('accessibility-plainTextMode') === 'true',
      fontSize: parseInt(localStorage.getItem('accessibility-fontSize') || '100'),
      lineSpacing: parseInt(localStorage.getItem('accessibility-lineSpacing') || '160'),
      fontFamily: localStorage.getItem('accessibility-fontFamily') || 'default',
      backgroundColor: localStorage.getItem('accessibility-backgroundColor') || 'white'
    };
    
    this.init();
  }

  init() {
    // Initialize UI based on current settings
    this.syncUIWithSettings();
    this.applySettings();
    
    // Close button event
    this.closeBtn?.addEventListener('click', () => this.closePanel());
    
    // Backdrop click to close
    this.panel?.addEventListener('click', (e) => {
      if (e.target === this.panel) {
        this.closePanel();
      }
    });
    
    // Setting change events
    document.querySelectorAll('[data-setting]').forEach(control => {
      if (control.type === 'checkbox') {
        control.addEventListener('change', () => this.handleCheckboxChange(control));
      } else if (control.type === 'range') {
        control.addEventListener('input', () => this.handleRangeChange(control));
      } else if (control.type === 'radio') {
        control.addEventListener('change', () => this.handleRadioChange(control));
      } else if (control.tagName === 'SELECT') {
        control.addEventListener('change', () => this.handleSelectChange(control));
      } else if (control.tagName === 'BUTTON') {
        control.addEventListener('click', () => this.handleButtonClick(control));
      }
    });
    
    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => this.handleKeyDown(e));
    
    // Reset settings button
    const resetBtn = document.getElementById('resetAccessibilitySettings');
    resetBtn?.addEventListener('click', () => this.resetAllSettings());
    
    // Share tips button
    const shareTipsBtn = document.getElementById('shareAccessibilityTips');
    shareTipsBtn?.addEventListener('click', () => this.shareAccessibilityTips());
    
    // Expose global function to open panel
    window.openAccessibilityPanel = () => this.openPanel();
    
    console.log('AccessibilityPanel initialized with settings:', this.settings);
  }

  openPanel() {
    console.log('Opening accessibility panel...', this.panel);
    this.panel?.classList.add('show');
    document.body.style.overflow = 'hidden';
    
    // Focus the close button for keyboard navigation
    setTimeout(() => {
      this.closeBtn?.focus();
    }, 100);
    
    this.announceToScreenReader('Accessibility options panel opened');
  }

  closePanel() {
    this.panel?.classList.remove('show');
    document.body.style.overflow = '';
    this.announceToScreenReader('Accessibility options panel closed');
  }

  isOpen() {
    return this.panel?.classList.contains('show') ?? false;
  }

  handleCheckboxChange(control) {
    const setting = control.dataset.setting;
    if (setting === 'keyboardHelpers' || setting === 'screenReaderHelpers') {
      this.settings[setting] = control.checked;
      localStorage.setItem(`accessibility-${setting}`, control.checked.toString());
      this.applySettings();
      
      const featureName = setting === 'keyboardHelpers' ? 'Keyboard helpers' : 'Screen reader helpers';
      this.announceToScreenReader(`${featureName} ${control.checked ? 'enabled' : 'disabled'}`);
    }
  }

  handleRangeChange(control) {
    const setting = control.dataset.setting;
    if (setting === 'fontSize' || setting === 'lineSpacing') {
      const value = parseInt(control.value);
      this.settings[setting] = value;
      localStorage.setItem(`accessibility-${setting}`, value.toString());
      
      // Update display value
      const displayElement = document.getElementById(`${setting}Value`);
      if (displayElement) {
        displayElement.textContent = `${value}%`;
      }
      
      this.applyPlainTextSettings();
    }
  }

  handleRadioChange(control) {
    const setting = control.dataset.setting;
    if (setting === 'backgroundColor' && control.checked) {
      this.settings[setting] = control.value;
      localStorage.setItem(`accessibility-${setting}`, control.value);
      this.applyPlainTextSettings();
      this.announceToScreenReader(`Background color changed to ${control.value}`);
    }
  }

  handleSelectChange(control) {
    const setting = control.dataset.setting;
    if (setting === 'fontFamily') {
      this.settings[setting] = control.value;
      localStorage.setItem(`accessibility-${setting}`, control.value);
      this.applyPlainTextSettings();
      this.announceToScreenReader(`Font changed to ${control.value === 'default' ? 'default' : control.value}`);
    }
  }

  handleButtonClick(control) {
    const setting = control.dataset.setting;
    if (setting === 'plainTextMode') {
      this.togglePlainTextMode();
    }
  }

  handleKeyDown(e) {
    // Escape key to close panel
    if (e.key === 'Escape' && this.isOpen()) {
      this.closePanel();
      return;
    }
    
    // T key to toggle plain text mode (only if not in input field)
    if (e.key === 't' || e.key === 'T') {
      const target = e.target;
      if (!['INPUT', 'TEXTAREA', 'SELECT'].includes(target.tagName)) {
        e.preventDefault();
        this.togglePlainTextMode();
      }
    }
  }

  togglePlainTextMode() {
    this.settings.plainTextMode = !this.settings.plainTextMode;
    localStorage.setItem('accessibility-plainTextMode', this.settings.plainTextMode.toString());
    
    // Update button state
    if (this.plainTextToggle) {
      this.plainTextToggle.setAttribute('aria-pressed', this.settings.plainTextMode.toString());
    }
    
    // Show/hide customization options
    if (this.plainTextCustomization) {
      this.plainTextCustomization.style.display = this.settings.plainTextMode ? 'block' : 'none';
    }
    
    this.applySettings();
    this.announceToScreenReader(`Plain text mode ${this.settings.plainTextMode ? 'enabled' : 'disabled'}`);
  }

  syncUIWithSettings() {
    // Sync checkboxes
    const keyboardCheckbox = document.getElementById('keyboardHelpers');
    if (keyboardCheckbox) keyboardCheckbox.checked = this.settings.keyboardHelpers;
    
    const screenReaderCheckbox = document.getElementById('screenReaderHelpers');
    if (screenReaderCheckbox) screenReaderCheckbox.checked = this.settings.screenReaderHelpers;
    
    // Sync plain text toggle
    if (this.plainTextToggle) {
      this.plainTextToggle.setAttribute('aria-pressed', this.settings.plainTextMode.toString());
    }
    
    // Sync plain text customization visibility
    if (this.plainTextCustomization) {
      this.plainTextCustomization.style.display = this.settings.plainTextMode ? 'block' : 'none';
    }
    
    // Sync range sliders
    const fontSizeSlider = document.getElementById('fontSize');
    if (fontSizeSlider) {
      fontSizeSlider.value = this.settings.fontSize.toString();
      const fontSizeValue = document.getElementById('fontSizeValue');
      if (fontSizeValue) fontSizeValue.textContent = `${this.settings.fontSize}%`;
    }
    
    const lineSpacingSlider = document.getElementById('lineSpacing');
    if (lineSpacingSlider) {
      lineSpacingSlider.value = this.settings.lineSpacing.toString();
      const lineSpacingValue = document.getElementById('lineSpacingValue');
      if (lineSpacingValue) lineSpacingValue.textContent = `${this.settings.lineSpacing}%`;
    }
    
    // Sync font family select
    const fontFamilySelect = document.getElementById('fontFamily');
    if (fontFamilySelect) fontFamilySelect.value = this.settings.fontFamily;
    
    // Sync background color radio buttons
    const backgroundRadios = document.querySelectorAll('input[name="backgroundColor"]');
    backgroundRadios.forEach(radio => {
      radio.checked = radio.value === this.settings.backgroundColor;
    });
  }

  applySettings() {
    // Apply keyboard helpers - matches accessibility.css classes
    if (this.settings.keyboardHelpers) {
      document.body.classList.add('keyboard-helpers-enabled');
    } else {
      document.body.classList.remove('keyboard-helpers-enabled');
    }
    
    // Apply screen reader helpers - matches accessibility.css classes
    if (this.settings.screenReaderHelpers) {
      document.body.classList.add('screen-reader-helpers-enabled');
    } else {
      document.body.classList.remove('screen-reader-helpers-enabled');
    }
    
    // Apply plain text mode - matches accessibility.css classes
    if (this.settings.plainTextMode) {
      document.body.classList.add('plain-text-mode');
      this.applyPlainTextSettings();
    } else {
      document.body.classList.remove('plain-text-mode');
      this.removePlainTextSettings();
    }
  }

  applyPlainTextSettings() {
    if (!this.settings.plainTextMode) return;
    
    // Use CSS custom properties to set the values - matches accessibility.css
    document.documentElement.style.setProperty('--plain-text-font-size', this.settings.fontSize.toString());
    document.documentElement.style.setProperty('--plain-text-line-spacing', this.settings.lineSpacing.toString());
    
    // Apply font class - matches accessibility.css classes  
    document.body.classList.remove('font-default', 'font-atkinson', 'font-opendyslexic');
    document.body.classList.add(`font-${this.settings.fontFamily}`);
    
    // Apply background class - matches accessibility.css classes
    document.body.classList.remove('bg-white', 'bg-cream', 'bg-blue', 'bg-pink');
    document.body.classList.add(`bg-${this.settings.backgroundColor}`);
  }

  removePlainTextSettings() {
    // Remove CSS custom properties
    document.documentElement.style.removeProperty('--plain-text-font-size');
    document.documentElement.style.removeProperty('--plain-text-line-spacing');
    
    // Remove classes
    document.body.classList.remove('font-default', 'font-atkinson', 'font-opendyslexic');
    document.body.classList.remove('bg-white', 'bg-cream', 'bg-blue', 'bg-pink');
  }

  announceToScreenReader(message) {
    if (this.settings.screenReaderHelpers && this.liveRegion) {
      this.liveRegion.textContent = message;
      
      // Clear after announcement
      setTimeout(() => {
        if (this.liveRegion) this.liveRegion.textContent = '';
      }, 1000);
    }
  }

  resetAllSettings() {
    // Confirm with user
    if (!confirm('Are you sure you want to reset all accessibility settings to default?')) {
      return;
    }
    
    // Clear localStorage
    Object.keys(this.settings).forEach(key => {
      localStorage.removeItem(`accessibility-${key}`);
    });
    
    // Reset settings object
    this.settings = {
      keyboardHelpers: false,
      screenReaderHelpers: false,
      plainTextMode: false,
      fontSize: 100,
      lineSpacing: 160,
      fontFamily: 'default',
      backgroundColor: 'white'
    };
    
    // Sync UI and apply
    this.syncUIWithSettings();
    this.applySettings();
    
    this.announceToScreenReader('All accessibility settings have been reset to default');
  }

  shareAccessibilityTips() {
    const tips = `Accessibility Tips for Better Web Browsing:

🔍 Use browser zoom: Ctrl/Cmd + Plus/Minus
⌨️ Navigate with Tab key and arrow keys
🎧 Try screen readers like NVDA (free) or VoiceOver (Mac)
🎨 Adjust system display settings for high contrast
📖 Use reader mode in your browser for cleaner text
💬 Look for accessibility options in website settings

Visit our accessibility statement for more information!`;

    if (navigator.share) {
      navigator.share({
        title: 'Web Accessibility Tips',
        text: tips
      }).catch(console.error);
    } else {
      // Fallback: copy to clipboard
      navigator.clipboard.writeText(tips).then(() => {
        alert('Accessibility tips copied to clipboard!');
      }).catch(() => {
        alert('Unable to share tips. Please check our accessibility statement for more information.');
      });
    }
  }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  new AccessibilityPanel();
});
</script>