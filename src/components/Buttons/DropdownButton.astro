---
// DropdownButton.astro - Reusable neumorphic dropdown button
export interface Props {
  buttonText: string;
  menuItems: Array<{
    text: string;
    href: string;
  }>;
  className?: string;
  width?: string;
  maxWidth?: string;
}

const {
  buttonText,
  menuItems,
  className = "",
  width = "400px",
  maxWidth = "480px"
} = Astro.props;
---

<div class={`dropdown ${className}`} style={`--menu-width: ${width}; --max-width: ${maxWidth};`}>
  <button class="dropdown-button" aria-haspopup="true" aria-expanded="false">
    {buttonText}
  </button>
  <ul class="dropdown-menu" role="menu">
    {menuItems.map(item => (
      <li>
        <a href={item.href} role="menuitem">{item.text}</a>
      </li>
    ))}
  </ul>
</div>

<style>
  .dropdown {
    position: relative;
    display: inline-block;
  }

  .dropdown-button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0 2em;
    height: 50px;
    border: none;
    background: var(--color-secondary);
    cursor: pointer;
    outline: none;
    box-shadow:
      4px 4px 6px rgba(0,0,0,.2),
      -4px -4px 6px rgba(255,255,255,.7),
      inset 4px 4px 6px rgba(0,0,0,.4),
      inset -4px -4px 6px rgba(255,255,255,.2);
    border-radius: 30px;
    border-top: 1px solid rgba(255,255,255,.1);
    border-bottom: 1px solid rgba(255,255,255,.1);
    color: var(--color-white);
    font-weight: var(--font-medium);
    text-transform: uppercase;
    letter-spacing: 2px;
    font-size: var(--text-lg);
    transition: background var(--transition-base);
    font-family: var(--font-body);
  }

  .dropdown:hover .dropdown-button {
    background: var(--color-primary);
  }

  .dropdown-menu {
    display: block;
    margin: 8px 0 0;
    list-style: none;
    width: var(--menu-width);
    background: var(--color-secondary);
    border-radius: 25px;
    box-shadow:
      4px 4px 6px rgba(0,0,0,.2),
      -4px -4px 6px rgba(255,255,255,.7),
      inset 4px 4px 6px rgba(0,0,0,.4),
      inset -4px -4px 6px rgba(255,255,255,.2);
    overflow: hidden;
    max-height: 0;
    opacity: 0;
    transition: max-height var(--transition-base), opacity var(--transition-base);
    padding: 0;
  }

  .dropdown:hover .dropdown-menu {
    max-height: 500px;
    opacity: 1;
  }

  .dropdown-menu li {
    margin: 0;
    padding: 0;
  }

  .dropdown-menu li a {
    display: block;
    padding: .75rem 1.25rem;
    color: var(--color-white);
    text-decoration: none;
    letter-spacing: 1px;
    text-transform: capitalize;
    white-space: normal;
    word-break: break-word;
    transition: color var(--transition-fast), font-weight var(--transition-fast);
  }

  .dropdown-menu li a:hover {
    color: var(--color-primary);
    font-weight: var(--font-bold);
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .dropdown {
      display: block;
      width: 100%;
      text-align: center;
      margin: 0 auto;
    }

    .dropdown-button {
      width: 100%;
      max-width: var(--max-width);
      font-size: var(--text-base);
      padding: 0 1rem;
      height: 42px;
    }

    .dropdown-menu {
      width: 100%;
      max-width: var(--max-width);
      margin: 8px auto 0;
      font-size: var(--text-sm);
      max-height: 500px;
    }

    .dropdown-menu li a {
      padding: .5rem 1rem;
    }
  }
</style>

<script>
  // Handle clicks for proper navigation
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.dropdown-menu a').forEach(link => {
      link.addEventListener('click', () => {
        const href = link.getAttribute('href');
        if (href && href !== '#') {
          // For internal links, use normal navigation
          if (href.startsWith('/') || href.startsWith('.') || !href.includes('://')) {
            window.location.href = href;
          } else {
            // For external links, open in same window
            window.location.href = href;
          }
        }
      });
    });

    // Handle keyboard navigation
    document.querySelectorAll('.dropdown').forEach(dropdown => {
      const button = dropdown.querySelector('.dropdown-button');

      button?.addEventListener('keydown', (e) => {
        const keyEvent = e as KeyboardEvent;
        if (keyEvent.key === 'Enter' || keyEvent.key === ' ') {
          keyEvent.preventDefault();
          dropdown.classList.toggle('active');
        }
      });
    });
  });
</script>