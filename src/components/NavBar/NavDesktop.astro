---
import { links } from './navItems';
import { isActive } from './navUtils';
import './navStyles.css';

const currentPath = Astro.url.pathname;
---

<nav class="gm-nav" aria-label="Desktop Navigation" data-nav-desktop data-expanded="true">
  <div class="gm-container">
    <div class="gm-nav-header">
      <div class="gm-logo-section">
        <a href="/" class="gm-brand">
          <img
            src="/images/LogoBlue.png"
            alt="IC the Moon"
            class="gm-logo"
            onerror="this.style.display='none'; this.nextElementSibling.style.display='block'"
          />
          <span class="gm-logo-text" style="display:none">IC</span>
        </a>
      </div>

      <div class="gmd-menu-section">
        <ul class="gmd-menu-list">
          {links.map((l) => (
            <li class={`gmd-menu-item ${l.hasMegaMenu ? 'has-mega-menu' : ''}`} data-mega-menu={l.hasMegaMenu ? 'true' : undefined}>
              <a
                href={l.href}
                class={`gmd-menu-link ${isActive(l.href, currentPath) ? 'active' : ''} ${l.hasMegaMenu ? 'has-mega-menu' : ''}`}
                target={l.external ? '_blank' : undefined}
                rel={l.external ? 'noopener noreferrer' : undefined}
                data-megamenu-trigger={l.hasMegaMenu ? l.label.toLowerCase() : undefined}
              >
                {l.label}
              </a>
            </li>
          ))}
        </ul>
        
  </div>

  <!-- Separate Megamenu Container within same nav -->
  <div class="gm-megamenu-container" data-megamenu-container>
    {links.filter(l => l.hasMegaMenu && l.megaMenu).map((l, linkIndex) => (
      <div class="gm-megamenu-panel" data-megamenu-for={l.label.toLowerCase()} data-megamenu-index={linkIndex}>
        <div class="gm-megamenu-content">
          <div class="gm-megamenu-grid">
            {l.megaMenu!.sections.map((section) => (
              <div class="gm-megamenu-section">
                <h3 class="gm-megamenu-title">{section.title}</h3>
                <div class="gm-megamenu-links">
                  {section.items.map((item) => (
                    <a 
                      href={item.href} 
                      class="gm-megamenu-link"
                      target={item.href.startsWith('http') ? '_blank' : undefined}
                      rel={item.href.startsWith('http') ? 'noopener noreferrer' : undefined}
                    >
                      {item.title}
                      {item.description && <span class="gm-megamenu-desc"> - {item.description}</span>}
                    </a>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    ))}
  </div>
</nav>

  <!-- DISABLED: Desktop mega menu container -->
  <div class="gmd-mega-menu-container" data-mega-container>
    {links.filter(l => l.hasMegaMenu && l.megaMenu).map((l, index) => (
      <div class="gmd-mega-menu" data-mega-menu-id={`mega-${index}`}>
        <div class="gmd-mega-grid">
          {l.megaMenu!.sections.map((section) => (
            <div class="gmd-mega-section">
              <h3 class="gmd-mega-title">{section.title}</h3>
              <div class="gmd-mega-items">
                {section.items.map((item) => (
                  <a 
                    href={item.href} 
                    class="gmd-mega-item"
                    target={item.href?.startsWith('http') ? '_blank' : undefined}
                    rel={item.href?.startsWith('http') ? 'noopener noreferrer' : undefined}
                  >
                    {'image' in item && item.image && (
                      <div class="gmd-mega-image">
                        <img src={item.image} alt={item.title} loading="lazy" />
                      </div>
                    )}
                    <div class="gmd-mega-content">
                      <h4 class="gmd-mega-item-title">{item.title}</h4>
                      <p class="gmd-mega-item-desc">{item.description}</p>
                    </div>
                  </a>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
    ))}
  </div>
</nav>

<script>
  import { initDesktopNav } from './functions.desktop.ts';
  
  // Initialize the desktop navigation script.
  // It contains internal checks to only run on the correct screen size.
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => initDesktopNav().catch(console.error));
  } else {
    initDesktopNav().catch(console.error);
  }
</script>