---
import { links } from './navItems';
import { isActive } from './navFunctions';
import './navStyles.css';

const currentPath = Astro.url.pathname;
---

<nav class="gm-nav" aria-label="Main Navigation" data-nav data-expanded="true">
  <div class="gm-container">
    <div class="gm-nav-header">
      <div class="gm-logo-section">
        <a href="/" class="gm-brand">
          <img
            src="/images/Logo-Text.svg"
            alt="IC the Moon"
            class="gm-logo"
            onerror="this.style.display='none'; this.nextElementSibling.style.display='block'"
          />
          <span class="gm-logo-text" style="display:none">IC</span>
        </a>
      </div>

      <div class="gm-menu-section">
        <ul class="gm-menu-list">
          {links.map((l) => (
            <li class="gm-menu-item" data-mega-menu={l.hasMegaMenu ? 'true' : undefined}>
              <a
                href={l.href}
                class={`gm-menu-link ${isActive(l.href, currentPath) ? 'active' : ''} ${l.hasMegaMenu ? 'has-mega-menu' : ''}`}
                target={l.external ? '_blank' : undefined}
                rel={l.external ? 'noopener noreferrer' : undefined}
              >
                {l.label}
                {l.hasMegaMenu && <span class="mega-menu-arrow">â–¼</span>}
              </a>
            </li>
          ))}
          <!-- Settings item for desktop navigation -->
          <li class="gm-menu-item">
            <button class="gm-menu-link" aria-label="Accessibility Settings" data-accessibility-toggle>
              Settings
            </button>
          </li>
        </ul>
      </div>

      <button class="gm-mobile-toggle" aria-label="Toggle menu" aria-controls="gm-mobile-menu" aria-expanded="false" data-mobile-toggle>
        <span class="hamburger-line"></span>
        <span class="hamburger-line"></span>
        <span class="hamburger-line"></span>
      </button>
    </div>

    {/* Mobile menu content directly in container */}
    <div class="gm-mobile-menu" id="gm-mobile-menu" data-mobile-menu>
      <div class="gm-mobile-panel">
        <ul class="gm-mobile-list">
          {links.map((l) => (
            <li>
              {l.hasMegaMenu && l.megaMenu ? (
                <button 
                  class={`gm-mobile-link gm-mobile-mega-toggle ${isActive(l.href, currentPath) ? 'active' : ''}`}
                  data-mobile-mega-toggle={l.label}
                >
                  {l.label}
                </button>
              ) : (
                <a
                  href={l.href}
                  class={`gm-mobile-link ${isActive(l.href, currentPath) ? 'active' : ''}`}
                  target={l.external ? '_blank' : undefined}
                  rel={l.external ? 'noopener noreferrer' : undefined}
                >
                  {l.label}
                </a>
              )}
            </li>
          ))}
          <!-- Settings item for mobile navigation -->
          <li>
            <button class="gm-mobile-link" aria-label="Accessibility Settings" data-accessibility-toggle>
              Settings
            </button>
          </li>
        </ul>
        
        <div class="gm-mobile-mega-column" data-mobile-mega-column>
          {links.filter(l => l.hasMegaMenu && l.megaMenu).map((l) => (
            <div class="gm-mobile-mega-content" data-mobile-mega-content={l.label}>
              <h3 class="gm-mobile-mega-header">{l.label}</h3>
              {l.megaMenu!.sections.map((section) => (
                <div class="gm-mobile-mega-section">
                  <h4 class="gm-mobile-mega-section-title">{section.title}</h4>
                  <div class="gm-mobile-mega-links">
                    {section.items.map((item) => (
                      <a 
                        href={item.href}
                        class="gm-mobile-mega-link"
                        target={item.href?.startsWith('http') ? '_blank' : undefined}
                        rel={item.href?.startsWith('http') ? 'noopener noreferrer' : undefined}
                      >
                        <span class="gm-mobile-mega-label">{item.title}</span>
                      </a>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>

  {/* Desktop mega menu container with stacked content */}
  <div class="gm-mega-menu-container" data-mega-container>
    {links.filter(l => l.hasMegaMenu && l.megaMenu).map((l, index) => (
      <div class="gm-mega-menu" data-mega-menu-id={`mega-${index}`}>
        <div class="gm-mega-grid">
          {l.megaMenu!.sections.map((section) => (
            <div class="gm-mega-section">
              <h3 class="gm-mega-title">{section.title}</h3>
              <div class="gm-mega-items">
                {section.items.map((item) => (
                  <a 
                    href={item.href} 
                    class="gm-mega-item"
                    target={item.href?.startsWith('http') ? '_blank' : undefined}
                    rel={item.href?.startsWith('http') ? 'noopener noreferrer' : undefined}
                  >
                    {'image' in item && item.image && (
                      <div class="gm-mega-image">
                        <img src={item.image} alt={item.title} loading="lazy" />
                      </div>
                    )}
                    <div class="gm-mega-content">
                      <h4 class="gm-mega-item-title">{item.title}</h4>
                      <p class="gm-mega-item-desc">{item.description}</p>
                    </div>
                  </a>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
    ))}
  </div>
</nav>

<div class="gm-backdrop" data-backdrop></div>

<!-- Accessibility Sidebar -->
<div class="accessibility-sidebar" data-accessibility-sidebar>
  <div class="accessibility-sidebar-content">
    <div class="accessibility-sidebar-header">
      <h2 class="accessibility-sidebar-title">
        <svg class="accessibility-sidebar-icon" width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <circle cx="12" cy="12" r="10"></circle>
          <circle cx="12" cy="8" r="2"></circle>
          <path d="M12 14v6M8 18h8"></path>
        </svg>
        Accessibility & Settings
      </h2>
      <button class="accessibility-sidebar-close" aria-label="Close settings" data-accessibility-close>
        <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <div class="accessibility-sidebar-body">
      <!-- Visual Accessibility Section -->
      <div class="accessibility-section">
        <h3 class="accessibility-section-title">
          <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
          </svg>
          Visual Settings
        </h3>
        
        <div class="accessibility-control">
          <div class="accessibility-control-info">
            <label class="accessibility-control-label">Scroll Effects</label>
            <span class="accessibility-control-desc">Enable/disable page scroll animations</span>
          </div>
          <label class="accessibility-toggle">
            <input type="checkbox" class="accessibility-checkbox" data-setting="scroll-effects" checked>
            <span class="accessibility-slider"></span>
          </label>
        </div>

        <div class="accessibility-control">
          <div class="accessibility-control-info">
            <label class="accessibility-control-label">Animations</label>
            <span class="accessibility-control-desc">Enable/disable UI animations</span>
          </div>
          <label class="accessibility-toggle">
            <input type="checkbox" class="accessibility-checkbox" data-setting="animations" checked>
            <span class="accessibility-slider"></span>
          </label>
        </div>

        <div class="accessibility-control">
          <div class="accessibility-control-info">
            <label class="accessibility-control-label">High Contrast</label>
            <span class="accessibility-control-desc">Increase color contrast for better visibility</span>
          </div>
          <label class="accessibility-toggle">
            <input type="checkbox" class="accessibility-checkbox" data-setting="high-contrast">
            <span class="accessibility-slider"></span>
          </label>
        </div>
      </div>

      <!-- Search Section -->
      <div class="accessibility-section">
        <h3 class="accessibility-section-title">
          <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <circle cx="11" cy="11" r="8"></circle>
            <path d="m21 21-4.35-4.35"></path>
          </svg>
          Search
        </h3>
        
        <div class="accessibility-search">
          <input type="search" class="accessibility-search-input" placeholder="Search site..." aria-label="Search site">
          <button class="accessibility-search-btn" aria-label="Search">
            <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <circle cx="11" cy="11" r="8"></circle>
              <path d="m21 21-4.35-4.35"></path>
            </svg>
          </button>
        </div>
      </div>

      <!-- Preferences Section -->
      <div class="accessibility-section">
        <h3 class="accessibility-section-title">
          <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <circle cx="12" cy="12" r="3"></circle>
            <path d="M12 1v6M12 17v6M4.22 4.22l4.24 4.24M15.54 15.54l4.24 4.24M1 12h6M17 12h6M4.22 19.78l4.24-4.24M15.54 8.46l4.24-4.24"></path>
          </svg>
          Preferences
        </h3>
        
        <div class="accessibility-control">
          <div class="accessibility-control-info">
            <label class="accessibility-control-label">Reduced Motion</label>
            <span class="accessibility-control-desc">Minimize animations and transitions</span>
          </div>
          <label class="accessibility-toggle">
            <input type="checkbox" class="accessibility-checkbox" data-setting="reduced-motion">
            <span class="accessibility-slider"></span>
          </label>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Accessibility Sidebar Backdrop -->
<div class="accessibility-backdrop" data-accessibility-backdrop></div>

<script>
  import { initNavigation } from './navFunctions';
  initNavigation();
  
  // Accessibility Sidebar Functionality
  function initAccessibilitySidebar() {
    const toggleBtns = document.querySelectorAll('[data-accessibility-toggle]');
    const sidebar = document.querySelector('[data-accessibility-sidebar]');
    const backdrop = document.querySelector('[data-accessibility-backdrop]');
    const closeBtn = document.querySelector('[data-accessibility-close]');
    
    if (!sidebar || !backdrop || !closeBtn) return;
    
    function openSidebar() {
      sidebar.classList.add('open');
      backdrop.classList.add('open');
      document.body.style.overflow = 'hidden';
    }
    
    function closeSidebar() {
      sidebar.classList.remove('open');
      backdrop.classList.remove('open');
      document.body.style.overflow = '';
    }
    
    // Event listeners for all toggle buttons (desktop and mobile)
    toggleBtns.forEach(btn => {
      btn.addEventListener('click', openSidebar);
    });
    
    closeBtn.addEventListener('click', closeSidebar);
    backdrop.addEventListener('click', closeSidebar);
    
    // Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && sidebar.classList.contains('open')) {
        closeSidebar();
      }
    });
    
    // Settings functionality
    const settingCheckboxes = document.querySelectorAll('[data-setting]');
    settingCheckboxes.forEach(checkbox => {
      const setting = checkbox.dataset.setting;
      
      // Load saved setting
      const saved = localStorage.getItem(`accessibility-${setting}`);
      if (saved !== null) {
        checkbox.checked = saved === 'true';
      }
      
      // Save setting on change
      checkbox.addEventListener('change', () => {
        localStorage.setItem(`accessibility-${setting}`, checkbox.checked);
        
        // Apply setting immediately
        if (setting === 'scroll-effects') {
          document.body.classList.toggle('no-scroll-effects', !checkbox.checked);
        } else if (setting === 'animations') {
          document.body.classList.toggle('no-animations', !checkbox.checked);
        } else if (setting === 'high-contrast') {
          document.body.classList.toggle('high-contrast', checkbox.checked);
        } else if (setting === 'reduced-motion') {
          document.body.classList.toggle('reduced-motion', checkbox.checked);
        }
      });
      
      // Apply initial setting
      checkbox.dispatchEvent(new Event('change'));
    });
  }
  
  // Initialize accessibility sidebar
  initAccessibilitySidebar();
</script>