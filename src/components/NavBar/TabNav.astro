---
// Simple top-left hamburger navigation matching BottomNav pill design
import { links } from './navItems';

const currentPath = Astro.url.pathname;

function isActive(href: string, currentPath: string): boolean {
  if (href === '/') return currentPath === '/';
  return currentPath.startsWith(href);
}
---

<nav class="nav-tab" id="navTab">
  <!-- Expanded Menu -->
  <div class="nav-expanded" id="navExpanded">
    {links.map((link) => (
      <div class="nav-item">
        <a
          href={link.href}
          class={`nav-link ${isActive(link.href, currentPath) ? 'active' : ''} ${(['Projects', 'Resources', 'Luna'].includes(link.label)) ? 'has-card' : ''}`}
          target={link.external ? '_blank' : undefined}
          rel={link.external ? 'noopener noreferrer' : undefined}
          data-label={link.label}
        >
          {link.label}
        </a>
      </div>
    ))}
  </div>
  
  <!-- Hamburger Toggle -->
  <button class="nav-toggle" id="navToggle" aria-label="Navigation Menu">
    <div class="nav-icon">
      <span class="nav-line"></span>
      <span class="nav-line"></span>
      <span class="nav-line"></span>
    </div>
  </button>
</nav>

<style>
  /* Top-Left Navigation Tab - using brand colors */
  .nav-tab {
    position: fixed !important;
    top: 20px !important;
    left: -20px !important;
    z-index: 999 !important;
    display: block !important;
    pointer-events: auto !important;
    opacity: 1 !important;
    visibility: visible !important;
  }

  .nav-toggle {
    display: flex !important;
    align-items: center !important;
    justify-content: flex-end !important;
    width: auto !important;
    min-width: 120px !important;
    height: 48px !important;
    background: var(--brand-background) !important;
    border: 1px solid color-mix(in srgb, var(--brand-secondary) 20%, transparent) !important;
    border-radius: 0 28px 28px 0 !important;
    box-shadow: 4px 0 16px rgba(24, 78, 119, 0.1) !important;
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    cursor: pointer !important;
    color: var(--brand-secondary) !important;
    border-left: none !important;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 1 !important;
    visibility: visible !important;
    position: relative !important;
    margin: 0 !important;
    padding: 0 20px 0 32px !important;
  }

  .nav-icon {
    display: flex !important;
    flex-direction: column !important;
    justify-content: center !important;
    align-items: center !important;
    gap: 5px !important;
    width: 20px !important;
    height: 20px !important;
  }

  .nav-line {
    width: 18px !important;
    height: 2px !important;
    background: currentColor !important;
    border-radius: 2px !important;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
    transform-origin: center !important;
  }

  /* Hover: skewed hamburger at 45 degrees */
  .nav-toggle:hover .nav-line {
    transform: rotate(45deg) !important;
  }

  .nav-toggle:hover {
    background: var(--brand-primary) !important;
    color: var(--brand-text-light) !important;
    box-shadow: 8px 0 20px color-mix(in srgb, var(--brand-primary) 25%, transparent) !important;
  }

  /* Clicked/Locked: X transformation */
  .nav-toggle.active {
    background: var(--brand-primary) !important;
    color: var(--brand-text-light) !important;
    box-shadow: 8px 0 20px color-mix(in srgb, var(--brand-primary) 25%, transparent) !important;
  }

  .nav-toggle.active .nav-line:nth-child(1) {
    transform: translateY(7px) rotate(45deg) !important;
    transform-origin: center !important;
  }

  .nav-toggle.active .nav-line:nth-child(2) {
    opacity: 0 !important;
    transform: scaleX(0) !important;
  }

  .nav-toggle.active .nav-line:nth-child(3) {
    transform: translateY(-7px) rotate(-45deg) !important;
    transform-origin: center !important;
  }

  /* Expanded Navigation Menu */
  .nav-expanded {
    position: absolute !important;
    top: 64px !important;
    left: 0 !important;
    display: flex !important;
    flex-direction: column !important;
    gap: 16px !important;
    opacity: 0 !important;
    transform: translateY(-10px) scale(0.98) !important;
    transform-origin: top left !important;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
    pointer-events: none !important;
    max-height: 400px !important;
    overflow: visible !important;
    z-index: 1001 !important;
  }

  .nav-expanded.show {
    opacity: 1 !important;
    transform: translateY(0) scale(1) !important;
    transform-origin: top left !important;
    pointer-events: auto !important;
  }

  /* Dynamic staggered animation - controlled by JavaScript */
  .nav-expanded.show .nav-item {
    opacity: 1 !important;
    transform: translateX(0) scale(1) !important;
  }

  .nav-expanded.exiting .nav-item {
    opacity: 0 !important;
    transform: translateX(-200px) scale(0.95) !important;
    transition: transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94),
                opacity 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.35s;
  }

  .nav-item {
    opacity: 0 !important;
    transform: translateX(-200px) scale(0.95) !important;
    transition: opacity 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94),
                transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.1s;
  }

  .nav-link {
    display: flex !important;
    align-items: center !important;
    justify-content: flex-end !important;
    width: auto !important;
    min-width: 120px !important;
    height: 48px !important;
    background: var(--brand-background) !important;
    border: 1px solid color-mix(in srgb, var(--brand-secondary) 20%, transparent) !important;
    border-radius: 0 28px 28px 0 !important;
    border-left: none !important;
    box-shadow: 4px 0 16px color-mix(in srgb, var(--brand-secondary) 8%, transparent) !important;
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    cursor: pointer !important;
    transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    color: var(--brand-secondary) !important;
    text-decoration: none !important;
    font-size: 14px !important;
    font-weight: 600 !important;
    font-family: var(--font-nav) !important;
    text-transform: uppercase !important;
    letter-spacing: 0.5px !important;
    position: relative !important;
    padding: 0 20px 0 32px !important;
    white-space: nowrap !important;
  }

  .nav-expanded.show .nav-link:hover {
    background: var(--brand-primary) !important;
    color: var(--brand-text-light) !important;
    box-shadow: 12px 0 24px color-mix(in srgb, var(--brand-primary) 30%, transparent) !important;
    transition-delay: 0s !important;
  }

  .nav-link.active {
    background: var(--brand-secondary) !important;
    color: var(--brand-text-light) !important;
    box-shadow: 4px 0 16px color-mix(in srgb, var(--brand-secondary) 30%, transparent) !important;
  }

  /* All nav items need stable positioning */
  .nav-item {
    position: relative !important;
    overflow: visible !important;
    display: block !important;
    /* Create a new stacking context for each nav item */
  }

  /* Sliding nav items with cards */
  .nav-link.has-card {
    transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) !important;
    position: relative !important;
    z-index: 1000 !important;
  }

  .nav-link.slide-out {
    background: var(--brand-primary) !important;
    color: var(--brand-text-light) !important;
    box-shadow: 12px 0 24px color-mix(in srgb, var(--brand-primary) 30%, transparent) !important;
    border-radius: 0 28px 28px 0 !important; /* Keep rounded right edge */
    z-index: 1001 !important; /* Above other nav items */
    /* Apply to any nav link with slide-out, not just has-card */
  }

  /* Mobile adjustments */
  @media (max-width: 768px) {
    .nav-tab {
      top: 10px;
      left: -15px;
    }
    
    .nav-toggle {
      height: 40px !important;
    }
    
    .nav-icon {
      gap: 4px !important;
      width: 18px !important;
      height: 18px !important;
    }

    .nav-line {
      width: 16px !important;
    }
    
    .nav-toggle.active .nav-line:nth-child(1) {
      transform: translateY(6px) rotate(45deg) !important;
    }

    .nav-toggle.active .nav-line:nth-child(3) {
      transform: translateY(-6px) rotate(-45deg) !important;
    }
    
    .nav-link {
      height: 40px !important;
      font-size: 12px !important;
      padding: 0 16px 0 24px !important;
    }

    .nav-link.has-card.slide-out {
      /* Keep mobile simple too */
    }
  }
</style>

<script>
  // Dynamic Navigation functionality
  const navToggle = document.getElementById('navToggle');
  const navExpanded = document.getElementById('navExpanded');
  
  let isLocked = false;
  let isAnimating = false;
  let hoverTimeout: ReturnType<typeof setTimeout> | null = null;
  let maxWidth = 0;

  // Initialize navigation sizing and timing
  function initializeNavigation() {
    const navItems = navExpanded?.querySelectorAll('.nav-item') || [];
    const navLinks = navExpanded?.querySelectorAll('.nav-link') || [];
    
    // Calculate maximum width needed for any nav link
    let calculatedMaxWidth = 120; // minimum width
    
    navLinks.forEach((link) => {
      const htmlLink = link as HTMLElement;
      // Create a temporary element to measure text width
      const tempEl = document.createElement('span');
      tempEl.style.visibility = 'hidden';
      tempEl.style.position = 'absolute';
      tempEl.style.whiteSpace = 'nowrap';
      
      // Responsive font sizing
      const isMobile = window.innerWidth <= 768;
      tempEl.style.fontSize = isMobile ? '12px' : '14px';
      tempEl.style.fontWeight = '600';
      tempEl.style.fontFamily = 'var(--font-nav, Poppins)';
      tempEl.style.textTransform = 'uppercase';
      tempEl.style.letterSpacing = '0.5px';
      tempEl.textContent = htmlLink.textContent || '';
      
      document.body.appendChild(tempEl);
      // Responsive padding - mobile uses 16px + 24px = 40px, desktop uses 32px + 20px = 52px
      const padding = isMobile ? 40 : 52;
      const textWidth = tempEl.offsetWidth + padding;
      document.body.removeChild(tempEl);
      
      calculatedMaxWidth = Math.max(calculatedMaxWidth, textWidth);
    });
    
    // Calculate safe maximum width (page text boundary + margin)
    const pageContent = document.querySelector('main') || document.body;
    const pageLeft = pageContent.getBoundingClientRect().left;
    const safeMaxWidth = Math.min(calculatedMaxWidth + 20, pageLeft - 40); // 40px safety margin
    
    maxWidth = Math.max(safeMaxWidth, 120); // Never go below 120px
    
    // Apply dynamic widths to hamburger and nav links (pre-sized to match)
    const style = document.createElement('style');
    style.textContent = `
      .nav-toggle {
        width: ${maxWidth}px !important;
      }
      .nav-link {
        width: ${maxWidth}px !important;
      }
    `;
    document.head.appendChild(style);

    // Set up staggered timing (no longer needed as hamburger is pre-sized)
    setupStaggeredAnimations(navItems.length);
  }

  function setupStaggeredAnimations(itemCount: number) {
    if (itemCount === 0) return;
    
    const baseDelay = 120; // 120ms base for smoother, more visible sequencing
    const navItems = navExpanded?.querySelectorAll('.nav-item') || [];
    
    navItems.forEach((item, index) => {
      const htmlItem = item as HTMLElement;
      
      // Entrance timing (top to bottom) - hamburger shows first (0ms), then items
      const entranceDelay = (index + 1) * baseDelay;
      
      // Exit timing (bottom to top) - items disappear first, hamburger transforms last
      const exitDelay = (itemCount - index) * baseDelay;
      
      // Set CSS custom properties for dynamic timing
      htmlItem.style.setProperty('--entrance-delay', `${entranceDelay}ms`);
      htmlItem.style.setProperty('--exit-delay', `${exitDelay}ms`);
    });
    
    // Add dynamic timing styles for nav items only
    const timingStyle = document.createElement('style');
    timingStyle.textContent = `
      .nav-expanded.show .nav-item {
        transition-delay: var(--entrance-delay) !important;
      }
      .nav-expanded.exiting .nav-item {
        transition-delay: var(--exit-delay) !important;
      }
    `;
    document.head.appendChild(timingStyle);
  }

  function showNavMenu() {
    if (isAnimating) return;
    
    isAnimating = true;
    
    if (hoverTimeout) {
      clearTimeout(hoverTimeout);
      hoverTimeout = null;
    }
    
    navExpanded?.classList.remove('exiting');
    navExpanded?.classList.add('show');
    
    // Calculate total animation time based on number of items
    const navItems = navExpanded?.querySelectorAll('.nav-item') || [];
    const totalTime = navItems.length * 120 + 200; // Base time for nav items
    
    setTimeout(() => {
      isAnimating = false;
      
      // Start 3-second auto-hide timer if not locked
      if (!isLocked) {
        hoverTimeout = setTimeout(() => {
          hideNavMenu();
        }, 3000);
      }
    }, totalTime);
  }

  function hideNavMenu() {
    if (isAnimating || isLocked) return;
    
    isAnimating = true;
    
    if (hoverTimeout) {
      clearTimeout(hoverTimeout);
      hoverTimeout = null;
    }
    
    navExpanded?.classList.add('exiting');
    
    // Calculate total exit animation time  
    const navItems = navExpanded?.querySelectorAll('.nav-item') || [];
    const totalTime = navItems.length * 120 + 200; // Time for all items to disappear
    
    setTimeout(() => {
      navExpanded?.classList.remove('show', 'exiting');
      isAnimating = false;
    }, totalTime);
  }

  // Hover to show menu
  navToggle?.addEventListener('mouseenter', () => {
    if (hoverTimeout) {
      clearTimeout(hoverTimeout);
      hoverTimeout = null;
    }
    showNavMenu();
  });

  // Cancel any collapse timer when entering nav area
  document.getElementById('navTab')?.addEventListener('mouseenter', () => {
    if (!isLocked && hoverTimeout) {
      clearTimeout(hoverTimeout);
      hoverTimeout = null;
    }
  });

  // Keep menu open while hovering over any nav links
  navExpanded?.addEventListener('mouseenter', () => {
    if (!isLocked && hoverTimeout) {
      clearTimeout(hoverTimeout);
      hoverTimeout = null;
    }
  });


  // Start hide timer when leaving nav area
  document.getElementById('navTab')?.addEventListener('mouseleave', () => {
    if (!isLocked) {
      if (hoverTimeout) {
        clearTimeout(hoverTimeout);
      }
      hoverTimeout = setTimeout(() => {
        hideNavMenu();
      }, 300);
    }
  });

  // Click to lock/unlock
  navToggle?.addEventListener('click', (e) => {
    e.stopPropagation();
    
    if (isLocked) {
      // Unlock and hide
      isLocked = false;
      navToggle.classList.remove('active');
      hideNavMenu();
      
      // Emit hamburger closed event for mobile mega menu
      document.dispatchEvent(new CustomEvent('tabnav:hamburger:closed'));
    } else {
      // Lock open
      isLocked = true;
      navToggle.classList.add('active');
      showNavMenu();
    }
  });

  // Close when clicking outside (only if locked)
  document.addEventListener('click', (e) => {
    if (isLocked && !document.getElementById('navTab')?.contains(e.target as Node)) {
      isLocked = false;
      navToggle?.classList.remove('active');
      hideNavMenu();
      
      // Emit hamburger closed event for mobile mega menu
      document.dispatchEvent(new CustomEvent('tabnav:hamburger:closed'));
    }
  });

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeNavigation);
  } else {
    initializeNavigation();
  }

  // Simple floating card preview for specific nav items
  const previewContent: Record<string, string> = {
    'Projects': `
      <div class="card-title">Our Projects</div>
      <div class="card-description">Explore our latest work and solutions</div>
      <div class="card-links">
        <a href="/projects/enterprise" class="card-link">
          <span class="card-link-icon">💼</span>
          Enterprise Solutions
        </a>
        <a href="/projects/ecommerce" class="card-link">
          <span class="card-link-icon">🛒</span>
          E-commerce Platforms  
        </a>
        <a href="/projects/creative" class="card-link">
          <span class="card-link-icon">🎨</span>
          Creative Portfolios
        </a>
      </div>
    `,
    'Resources': `
      <div class="card-title">Resources</div>
      <div class="card-description">Tools and guides to help you succeed</div>
      <div class="card-links">
        <a href="/resources/api" class="card-link">
          <span class="card-link-icon">📚</span>
          API Documentation
        </a>
        <a href="/resources/guides" class="card-link">
          <span class="card-link-icon">📖</span>
          Developer Guides
        </a>
        <a href="/resources/templates" class="card-link">
          <span class="card-link-icon">📋</span>
          Code Templates
        </a>
      </div>
    `,
    'Luna': `
      <div class="card-title">Luna Platform</div>
      <div class="card-description">AI-powered tools for modern businesses</div>
      <div class="card-links">
        <a href="/luna/ai" class="card-link">
          <span class="card-link-icon">🤖</span>
          AI Assistant
        </a>
        <a href="/luna/analytics" class="card-link">
          <span class="card-link-icon">📊</span>
          Smart Analytics
        </a>
        <a href="/luna/workflow" class="card-link">
          <span class="card-link-icon">⚡</span>
          Workflow Builder
        </a>
      </div>
    `
  };

  // Add hover and click events for sliding tab
  navExpanded?.addEventListener('mouseenter', (e) => {
    const target = e.target as HTMLElement;
    const navLink = target.closest('.nav-link') as HTMLElement;
    
    if (navLink) {
      const navLabel = navLink.textContent?.trim();
      const content = navLabel && previewContent[navLabel];
      
      if (content && (window as any).slidingTab) {
        // Remove slide-out from all nav links first
        const allNavLinks = document.querySelectorAll('.nav-link');
        allNavLinks.forEach(link => link.classList.remove('slide-out'));
        
        // Add slide-out class only to this nav link
        navLink.classList.add('slide-out');
        (window as any).slidingTab.show(content, navLabel);
      }
    }
  }, true);

  // Also trigger on click for mobile/touch devices
  navExpanded?.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    const navLink = target.closest('.nav-link') as HTMLElement;
    
    if (navLink) {
      const navLabel = navLink.textContent?.trim();
      const content = navLabel && previewContent[navLabel];
      
      if (content && (window as any).slidingTab) {
        // Prevent default navigation if we have preview content
        const href = navLink.getAttribute('href');
        if (href && (href.startsWith('/projects') || href.startsWith('/resources') || href.startsWith('/luna'))) {
          e.preventDefault();
          
          // Remove slide-out from all nav links first
          const allNavLinks = document.querySelectorAll('.nav-link');
          allNavLinks.forEach(link => link.classList.remove('slide-out'));
          
          // Add slide-out class only to this nav link
          navLink.classList.add('slide-out');
          (window as any).slidingTab.show(content, navLabel);
        }
      }
    }
  });

  // Hide sliding tab when leaving nav area  
  document.getElementById('navTab')?.addEventListener('mouseleave', () => {
    // Remove slide-out class from all nav links
    const slideOutLinks = document.querySelectorAll('.nav-link.slide-out');
    slideOutLinks.forEach(link => link.classList.remove('slide-out'));
    
    if ((window as any).slidingTab) {
      (window as any).slidingTab.scheduleHide(300);
    }
  });
</script>