---
// Simple top-left hamburger navigation matching BottomNav pill design
import { links } from './navItems';

const currentPath = Astro.url.pathname;

function isActive(href: string, currentPath: string): boolean {
  if (href === '/') return currentPath === '/';
  return currentPath.startsWith(href);
}
---

<style>
@import './styles/nav-base.css';
@import './styles/nav-toggle.css';  
@import './styles/nav-links.css';
</style>

<!-- Mobile Nav Background Overlay -->
<div class="nav-background-overlay" id="navBackgroundOverlay"></div>

<nav class="nav-tab" id="navTab" role="navigation" aria-label="Main navigation">
  <!-- Expanded Menu -->
  <ul class="nav-expanded" id="navExpanded" role="menu" aria-hidden="true">
    {links.map((link) => (
      <li class="nav-item" role="none">
        <a
          href={link.href}
          class={`nav-link ${isActive(link.href, currentPath) ? 'active' : ''}`}
          target={link.external ? '_blank' : undefined}
          rel={link.external ? 'noopener noreferrer' : undefined}
          role="menuitem"
          aria-current={isActive(link.href, currentPath) ? 'page' : undefined}
        >
          {link.label}
        </a>
      </li>
    ))}
  </ul>
  
  <!-- Hamburger Toggle -->
  <button 
    class="nav-toggle" 
    id="navToggle" 
    aria-label="Toggle navigation menu"
    aria-expanded="false"
    aria-controls="navExpanded"
  >
    <div class="nav-icon" aria-hidden="true">
      <span class="nav-line"></span>
      <span class="nav-line"></span>
      <span class="nav-line"></span>
    </div>
  </button>
</nav>


<script>
  import { initNav } from './navLogic';
  
  // Initialize navigation
  initNav();
  
  // Simple direct scroll-aware behavior (fallback)
  document.addEventListener('DOMContentLoaded', () => {
    const navTab = document.getElementById('navTab');
    const navToggle = document.getElementById('navToggle');
    
    if (navTab) {
      let lastScrollY = window.scrollY;
      let ticking = false;
      const scrollThreshold = 50;
      
      // Scroll handler
      function handleScroll() {
        const currentScrollY = window.scrollY;
        const scrollDelta = Math.abs(currentScrollY - lastScrollY);

        if (scrollDelta < scrollThreshold) return;

        const scrollingDown = currentScrollY > lastScrollY;
        
        if (scrollingDown && !navTab.classList.contains('nav-force-visible')) {
          // Scrolling down - hide nav
          navTab.classList.add('nav-hidden-top');
          // Close menu if open
          if (navTab.classList.contains('active')) {
            navToggle?.click();
          }
        } else if (!scrollingDown) {
          // Scrolling up - show nav
          navTab.classList.remove('nav-hidden-top');
        }

        lastScrollY = currentScrollY;
      }
      
      // Throttled scroll listener
      window.addEventListener('scroll', () => {
        if (!ticking) {
          requestAnimationFrame(() => {
            handleScroll();
            ticking = false;
          });
          ticking = true;
        }
      }, { passive: true });
      
      // Manual toggle handling
      navToggle?.addEventListener('click', () => {
        if (!navTab.classList.contains('active')) {
          // Opening - force visible for 3 seconds
          navTab.classList.add('nav-force-visible');
          setTimeout(() => {
            navTab.classList.remove('nav-force-visible');
          }, 3000);
        }
      });
      
      console.log('âœ… Top navigation scroll behavior initialized');
    }
  });
</script>