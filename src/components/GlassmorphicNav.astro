---
const currentPath = Astro.url.pathname;

const links = [
  { href: '/', label: 'Home' },
  { href: '/about', label: 'About' },
  { 
    href: '/projects', 
    label: 'Projects',
    hasMegaMenu: true,
    megaMenu: {
      sections: [
        {
          title: 'Featured Projects',
          items: [
            { title: 'Enterprise Solutions', description: 'Large-scale web applications', image: '/images/Placeholder.jpg', href: '/projects/enterprise' },
            { title: 'Creative Websites', description: 'Beautiful portfolio sites', image: '/images/Placeholder.jpg', href: '/projects/creative' },
            { title: 'E-commerce Platforms', description: 'Online stores & marketplaces', image: '/images/Placeholder.jpg', href: '/projects/ecommerce' }
          ]
        },
        {
          title: 'Recent Work',
          items: [
            { title: 'SaaS Dashboard', description: 'Modern analytics platform', href: '/projects/saas' },
            { title: 'Mobile App Design', description: 'iOS & Android interfaces', href: '/projects/mobile' },
            { title: 'Brand Identity', description: 'Complete visual rebrand', href: '/projects/branding' }
          ]
        },
        {
          title: 'Technologies',
          items: [
            { title: 'React & Next.js', description: 'Frontend frameworks', href: '/projects/react' },
            { title: 'Node.js APIs', description: 'Backend development', href: '/projects/nodejs' },
            { title: 'Cloud Solutions', description: 'AWS & deployment', href: '/projects/cloud' }
          ]
        }
      ]
    }
  },
  { 
    href: '/resources', 
    label: 'Resources',
    hasMegaMenu: true,
    megaMenu: {
      sections: [
        {
          title: 'Documentation',
          items: [
            { title: 'API Reference', description: 'Complete API documentation', image: '/images/Placeholder.jpg', href: '/resources/api' },
            { title: 'Design System', description: 'UI components & guidelines', image: '/images/Placeholder.jpg', href: '/resources/design' },
            { title: 'Best Practices', description: 'Development standards', image: '/images/Placeholder.jpg', href: '/resources/practices' }
          ]
        },
        {
          title: 'Tools & Downloads',
          items: [
            { title: 'Code Templates', description: 'Starter templates', href: '/resources/templates' },
            { title: 'Asset Library', description: 'Icons & graphics', href: '/resources/assets' },
            { title: 'Plugins', description: 'Useful extensions', href: '/resources/plugins' }
          ]
        },
        {
          title: 'Learning',
          items: [
            { title: 'Tutorials', description: 'Step-by-step guides', href: '/resources/tutorials' },
            { title: 'Video Courses', description: 'In-depth training', href: '/resources/courses' },
            { title: 'Community', description: 'Forums & discussions', href: '/resources/community' }
          ]
        }
      ]
    }
  },
  { 
    href: '/luna', 
    label: 'Luna',
    hasMegaMenu: true,
    megaMenu: {
      sections: [
        {
          title: 'Luna Platform',
          items: [
            { title: 'AI Assistant', description: 'Intelligent automation tools', image: '/images/Placeholder.jpg', href: '/luna/ai' },
            { title: 'Analytics Dashboard', description: 'Data insights & reporting', image: '/images/Placeholder.jpg', href: '/luna/analytics' },
            { title: 'Workflow Builder', description: 'Custom automation flows', image: '/images/Placeholder.jpg', href: '/luna/workflow' }
          ]
        },
        {
          title: 'Features',
          items: [
            { title: 'Smart Scheduling', description: 'Automated task management', href: '/luna/scheduling' },
            { title: 'Team Collaboration', description: 'Real-time communication', href: '/luna/collaboration' },
            { title: 'Integrations', description: 'Connect your tools', href: '/luna/integrations' }
          ]
        },
        {
          title: 'Getting Started',
          items: [
            { title: 'Quick Start Guide', description: 'Get up and running', href: '/luna/quickstart' },
            { title: 'API Documentation', description: 'Developer resources', href: '/luna/docs' },
            { title: 'Support Center', description: 'Help & tutorials', href: '/luna/support' }
          ]
        }
      ]
    }
  },
  { 
    href: 'https://insights.icthemoon.com/', 
    label: 'Insights', 
    external: true,
    hasMegaMenu: true,
    megaMenu: {
      sections: [
        {
          title: 'Latest Insights',
          items: [
            { title: 'Web Development Trends', description: '2024 technology landscape', image: '/images/Placeholder.jpg', href: 'https://insights.icthemoon.com/trends-2024' },
            { title: 'Design Psychology', description: 'User experience principles', image: '/images/Placeholder.jpg', href: 'https://insights.icthemoon.com/design-psychology' },
            { title: 'Performance Optimization', description: 'Speed up your site', image: '/images/Placeholder.jpg', href: 'https://insights.icthemoon.com/performance' }
          ]
        },
        {
          title: 'Popular Posts',
          items: [
            { title: 'React Best Practices', description: 'Clean code techniques', href: 'https://insights.icthemoon.com/react-practices' },
            { title: 'SEO in 2024', description: 'Modern optimization', href: 'https://insights.icthemoon.com/seo-2024' },
            { title: 'AI in Development', description: 'Tools & workflows', href: 'https://insights.icthemoon.com/ai-development' }
          ]
        },
        {
          title: 'Categories',
          items: [
            { title: 'Development', description: 'Code & frameworks', href: 'https://insights.icthemoon.com/development' },
            { title: 'Design', description: 'UI/UX & creativity', href: 'https://insights.icthemoon.com/design' },
            { title: 'Business', description: 'Strategy & growth', href: 'https://insights.icthemoon.com/business' }
          ]
        }
      ]
    }
  },
  { href: '/contact', label: 'Contact' },
];

function isActive(href: string): boolean {
  // Handle external links
  if (href.startsWith('http')) {
    return false;
  }
  
  // Exact match for root path
  if (href === '/' && currentPath === '/') {
    return true;
  }
  
  // For non-root paths, match exactly (no trailing slash normalization needed for Astro)
  if (href !== '/' && currentPath === href) {
    return true;
  }
  
  return false;
}
---

<nav class="gm-nav" aria-label="Main Navigation" data-nav data-expanded="true">
  <div class="gm-container">
    <div class="gm-logo-section">
      <a href="/" class="gm-brand">
        <img
          src="/images/Logo-Text.svg"
          alt="IC the Moon"
          class="gm-logo"
          onerror="this.style.display='none'; this.nextElementSibling.style.display='block'"
        />
        <span class="gm-logo-text" style="display:none">IC</span>
      </a>
    </div>

    <div class="gm-menu-section">
      <ul class="gm-menu-list">
        {links.map((l) => (
          <li class="gm-menu-item" data-mega-menu={l.hasMegaMenu ? 'true' : undefined}>
            <a
              href={l.href}
              class={`gm-menu-link ${isActive(l.href) ? 'active' : ''} ${l.hasMegaMenu ? 'has-mega-menu' : ''}`}
              target={l.external ? '_blank' : undefined}
              rel={l.external ? 'noopener noreferrer' : undefined}
            >
              {l.label}
              {l.hasMegaMenu && <span class="mega-menu-arrow">â–¼</span>}
            </a>
            
          </li>
        ))}
      </ul>
    </div>

    <button class="gm-mobile-toggle" aria-label="Toggle menu" aria-controls="gm-mobile-menu" aria-expanded="false" data-mobile-toggle>
      <span class="hamburger-line"></span>
      <span class="hamburger-line"></span>
      <span class="hamburger-line"></span>
    </button>
  </div>
</nav>

<div class="gm-mobile-menu" id="gm-mobile-menu" data-mobile-menu>
  <div class="gm-mobile-panel">
    <ul class="gm-mobile-list">
      {links.map((l) => (
        <li>
          {l.hasMegaMenu && l.megaMenu ? (
            <button 
              class={`gm-mobile-link gm-mobile-mega-toggle ${isActive(l.href) ? 'active' : ''}`}
              data-mobile-mega-toggle={l.label}
            >
              {l.label}
            </button>
          ) : (
            <a
              href={l.href}
              class={`gm-mobile-link ${isActive(l.href) ? 'active' : ''}`}
              target={l.external ? '_blank' : undefined}
              rel={l.external ? 'noopener noreferrer' : undefined}
            >
              {l.label}
            </a>
          )}
        </li>
      ))}
    </ul>
    
    <!-- Mega menu content column (appears on the right when expanded) -->
    <div class="gm-mobile-mega-column" data-mobile-mega-column>
      {links.filter(l => l.hasMegaMenu && l.megaMenu).map((l) => (
        <div class="gm-mobile-mega-content" data-mobile-mega-content={l.label}>
          <h3 class="gm-mobile-mega-header">{l.label}</h3>
          {l.megaMenu!.sections.map((section) => (
            <div class="gm-mobile-mega-section">
              <h4 class="gm-mobile-mega-section-title">{section.title}</h4>
              <div class="gm-mobile-mega-links">
                {section.items.map((item) => (
                  <a 
                    href={item.href}
                    class="gm-mobile-mega-link"
                    target={item.href?.startsWith('http') ? '_blank' : undefined}
                    rel={item.href?.startsWith('http') ? 'noopener noreferrer' : undefined}
                  >
                    <span class="gm-mobile-mega-label">{item.title}</span>
                  </a>
                ))}
              </div>
            </div>
          ))}
        </div>
      ))}
    </div>
  </div>
</div>


{/* Mega menus outside nav structure for proper blur */}
{links.filter(l => l.hasMegaMenu && l.megaMenu).map((l, index) => (
  <div class="gm-mega-menu" data-mega-menu-id={`mega-${index}`}>
    <div class="gm-mega-panel">
      <div class="gm-mega-grid">
        {l.megaMenu!.sections.map((section) => (
          <div class="gm-mega-section">
            <h3 class="gm-mega-title">{section.title}</h3>
            <div class="gm-mega-items">
              {section.items.map((item) => (
                <a 
                  href={item.href} 
                  class="gm-mega-item"
                  target={item.href?.startsWith('http') ? '_blank' : undefined}
                  rel={item.href?.startsWith('http') ? 'noopener noreferrer' : undefined}
                >
                  {'image' in item && item.image && (
                    <div class="gm-mega-image">
                      <img src={item.image} alt={item.title} loading="lazy" />
                    </div>
                  )}
                  <div class="gm-mega-content">
                    <h4 class="gm-mega-item-title">{item.title}</h4>
                    <p class="gm-mega-item-desc">{item.description}</p>
                  </div>
                </a>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
))}

<div class="gm-backdrop" data-backdrop></div>

<style>
  :root {
    --gm-cream-bg: rgba(255, 248, 240, 0.7);
    --gm-cream-border: rgba(255, 248, 240, 0.4);
    --gm-text-primary: #184e77;
    --gm-text-accent: #e63961;
    --gm-nav-height: 70px;
    --gm-mobile-pill-height: 60px;
  }

  .gm-nav {
    position: fixed;
    top: 20px;
    left: 20px;
    right: 20px;
    z-index: 1000;
    height: var(--gm-nav-height);
    background: var(--gm-cream-bg);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border: 1px solid var(--gm-cream-border);
    border-radius: 35px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    /* Remove overflow hidden to allow mega menus to show */
    overflow: visible;
  }

  .gm-container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    height: 100%;
    padding: 0 32px;
    position: relative;
  }

  .gm-logo-section {
    display: flex;
    align-items: center;
    z-index: 10;
  }

  .gm-brand {
    display: flex;
    align-items: center;
    text-decoration: none;
    transition: transform 0.3s ease;
  }

  .gm-brand:hover {
    transform: scale(1.05);
  }

  .gm-logo {
    height: 40px;
    width: auto;
    transition: height 0.4s ease;
  }

  .gm-logo-text {
    font-weight: 700;
    color: var(--gm-text-primary);
    font-size: 1.25rem;
    margin-left: 12px;
  }

  .gm-menu-section {
    display: none;
  }

  .gm-menu-list {
    display: flex;
    align-items: center;
    gap: 8px;
    margin: 0;
    padding: 0;
    list-style: none;
  }

  .gm-menu-link {
    display: flex;
    align-items: center;
    padding: 12px 20px;
    color: var(--gm-text-primary);
    text-decoration: none;
    font-size: 15px;
    font-weight: 700;
    border-radius: 20px;
    transition: all 0.3s ease;
    position: relative;
    text-transform: uppercase;
  }

  .gm-menu-link:hover {
    background: rgba(230, 57, 97, 0.08);
    transform: translateY(-1px);
  }

  .gm-menu-link.active {
    color: var(--gm-text-accent);
    font-weight: 600;
  }

  .gm-menu-link.mega-active {
    background: rgba(230, 57, 97, 0.08);
    transform: translateY(-1px);
  }

  .gm-menu-item {
    position: relative;
  }

  .mega-menu-arrow {
    display: none;
  }

  .gm-menu-link.has-mega-menu:hover .mega-menu-arrow {
    transform: rotate(180deg);
  }

  /* Mega Menu Styles */
  .gm-mega-menu {
    position: fixed;
    top: calc(var(--gm-nav-height) + 55px);
    left: 50vw !important;
    transform: translate3d(-50%, -10px, 0) !important;
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
    transition: opacity 0.5s cubic-bezier(0.4, 0, 0.2, 1), visibility 0.5s cubic-bezier(0.4, 0, 0.2, 1), transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 10001;
    min-width: 800px;
    max-width: min(1000px, calc(100vw - 40px));
    width: max-content;
  }

  .gm-mega-panel {
    background: rgb(255, 248, 240);
    border: 1px solid rgba(255, 248, 240, 0.8);
    border-radius: 24px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);
    padding: 32px;
    position: relative;
    will-change: transform, opacity;
    transform: translateZ(0);
  }

  .gm-mega-panel::before {
    display: none;
  }

  .gm-mega-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 40px;
  }

  .gm-mega-section {
    min-width: 200px;
  }

  .gm-mega-title {
    font-size: 16px;
    font-weight: 600;
    color: var(--gm-text-primary);
    margin: 0 0 20px 0;
    padding-bottom: 12px;
    border-bottom: 1px solid rgba(24, 78, 119, 0.1);
  }

  .gm-mega-items {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .gm-mega-item {
    display: flex;
    align-items: flex-start;
    gap: 12px;
    padding: 16px;
    border-radius: 16px;
    text-decoration: none;
    transition: all 0.3s ease;
    background: transparent;
    border: none;
  }

  .gm-mega-item:hover {
    background: rgba(230, 57, 97, 0.08);
    border-radius: 16px;
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
  }

  .gm-mega-image {
    width: 60px;
    height: 60px;
    border-radius: 12px;
    overflow: hidden;
    flex-shrink: 0;
    background: rgba(255, 255, 255, 0.5);
  }

  .gm-mega-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .gm-mega-item:hover .gm-mega-image img {
    transform: scale(1.05);
  }

  .gm-mega-content {
    flex: 1;
  }

  .gm-mega-item-title {
    font-size: 15px;
    font-weight: 600;
    color: var(--gm-text-primary);
    margin: 0 0 4px 0;
    line-height: 1.3;
  }

  .gm-mega-item-desc {
    font-size: 13px;
    color: var(--gm-text-primary);
    opacity: 0.7;
    margin: 0;
    line-height: 1.4;
  }

  .gm-mega-item:hover .gm-mega-item-title {
    color: var(--gm-text-accent);
  }

  /* Show mega menu on hover - only when nav is expanded */
  @media (min-width: 1024px) {
    .gm-nav[data-expanded="true"] ~ .gm-mega-menu.show {
      opacity: 1;
      visibility: visible;
      pointer-events: auto;
      transform: translate3d(-50%, 0, 0);
    }
  }
  
  /* Hide mega menus when nav is collapsed */
  .gm-nav[data-collapsed="true"] ~ .gm-mega-menu {
    display: none !important;
  }

  .gm-mobile-toggle {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 44px;
    height: 44px;
    background: none;
    border: none;
    cursor: pointer;
    gap: 4px;
    border-radius: 12px;
    transition: all 0.3s ease;
  }

  .gm-mobile-toggle:hover {
    background: none; /* no hover container behind hamburger */
    transform: scale(1.05);
  }

  .hamburger-line {
    width: 20px;
    height: 2px;
    background: var(--gm-text-primary);
    border-radius: 2px;
    transition: all 0.3s ease;
  }

  .gm-mobile-menu {
    position: fixed;
    top: 100px;
    left: 20px;
    right: 20px;
    z-index: 999;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-20px);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    pointer-events: none;
  }

  .gm-mobile-panel {
    background: var(--gm-cream-bg);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border: 1px solid var(--gm-cream-border);
    border-radius: 24px;
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
    padding: 16px;
    max-width: 280px;
    display: flex;
    transition: max-width 0.3s cubic-bezier(0.4, 0, 0.2, 1), padding 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    overflow: hidden;
  }

  .gm-mobile-panel.expanded {
    max-width: 680px;
    padding: 16px 8px; /* reduce far left/right padding for more room */
  }

  .gm-mobile-list {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: 4px;
    min-width: 100px; /* even narrower left column */
    flex-shrink: 0;
  }

  .gm-mobile-link {
    display: block;
    padding: 12px 16px;
    color: var(--gm-text-primary);
    text-decoration: none;
    font-size: 15px;
    font-weight: 500;
    border-radius: 12px;
    transition: all 0.3s ease;
    text-transform: uppercase;
    background: none;
    border: none;
    width: 100%;
    text-align: left;
    cursor: pointer;
    margin-right: 12px; /* more gap from center divider so highlight doesn't touch */
    position: relative; /* enable custom hover indicator */
  }

  /* Slim hover indicator (red bar) that doesn't touch divider */
  .gm-mobile-link::before {
    content: "";
    position: absolute;
    left: 2px;               /* subtle inset for breathing room */
    right: 0;                /* cover full item width; gap comes from margin-right */
    top: 4px;
    bottom: 4px;
    border-radius: 12px;
    background: rgba(230, 57, 97, 0.12);
    opacity: 0;
    transition: opacity 0.2s ease;
    pointer-events: none;
  }

  .gm-mobile-link:hover,
  .gm-mobile-link:focus-visible {
    color: var(--gm-text-primary); /* keep text blue */
    background: transparent; /* keep background clear; use pseudo-element */
  }
  /* For mega-menu toggles, keep text blue on hover/focus; rely on red blob only */
  .gm-mobile-mega-toggle:hover,
  .gm-mobile-mega-toggle:focus-visible {
    color: var(--gm-text-primary);
  }

  .gm-mobile-link:hover::before,
  .gm-mobile-link:focus-visible::before {
    opacity: 1;
  }

  .gm-mobile-link.active {
    color: var(--gm-text-accent);
    font-weight: 600;
  }

  .gm-mobile-mega-toggle.selected {
    background: transparent; /* remove wide red container */
    color: var(--gm-text-primary); /* keep text blue when selected */
  }
  /* Keep the red blob visible when the mega menu item is selected/open */
  .gm-mobile-mega-toggle.selected::before { opacity: 1; }

  /* Plus/Minus indicator for left column items that have mega menus */
  .gm-mobile-mega-toggle {
    position: relative;
    padding-left: 22px; /* space for indicator on the left */
    padding-right: 0;
  }
  /* Plus/Minus indicator on the left of the text */
  .gm-mobile-mega-toggle::after {
    content: '+';
    position: absolute;
    left: 8px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--gm-text-accent);
    font-weight: 700;
    font-size: 16px;
    line-height: 1;
    opacity: 0.9;
    transition: opacity 0.2s ease;
  }
  .gm-mobile-mega-toggle.selected::after {
    content: 'âˆ’';
    opacity: 1;
  }

  /* Mobile Mega Menu Column */
  .gm-mobile-mega-column {
    width: 0;
    opacity: 0;
    overflow: hidden;
    transition: width 0.3s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    padding-left: 0;
    border-left: none;
  }

  .gm-mobile-mega-column.show {
    width: 416px; /* moved separator 4px right, keep total width */
    margin-left: 4px; /* shifts the vertical separator right */
    opacity: 1;
    padding-left: 20px;
    border-left: 1px solid rgba(24, 78, 119, 0.1);
  }

  .gm-mobile-mega-content {
    display: none;
    height: 400px;
    overflow-y: auto;
    /* hide scrollbars while keeping scroll */
    -ms-overflow-style: none; /* IE/Edge */
    scrollbar-width: none; /* Firefox */
  }
  .gm-mobile-mega-content::-webkit-scrollbar { width: 0; height: 0; }

  .gm-mobile-mega-content.active {
    display: block;
  }

  .gm-mobile-mega-header {
    font-size: 18px;
    font-weight: 600;
    color: var(--gm-text-primary);
    margin: 0 0 20px 0;
    text-transform: capitalize;
  }

  /* Hide the mega header on mobile to reduce duplication with left list */
  @media (max-width: 1023px) {
    .gm-mobile-mega-header { display: none; }
  }

  .gm-mobile-mega-section {
    margin-bottom: 24px;
  }

  .gm-mobile-mega-section:last-child {
    margin-bottom: 0;
  }

  .gm-mobile-mega-section-title {
    font-size: 14px;
    font-weight: 600;
    color: var(--gm-text-accent); /* titles in red */
    margin: 0 0 12px 0;
    opacity: 1;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    cursor: pointer; /* tappable to expand/collapse */
    display: inline-flex;
    align-items: center;
  }

  /* Mobile-only: style section titles more subtle to not overshadow nav */
  @media (max-width: 1023px) {
    .gm-mobile-mega-section-title {
      color: var(--gm-text-primary) !important; /* blue text, more subtle */
      background: rgba(24, 78, 119, 0.08) !important; /* very light blue background */
      padding: 4px 8px; /* smaller padding */
      border-radius: 8px; /* less rounded, more subtle */
      font-weight: 600 !important; /* bold text */
      font-size: 12px !important; /* smaller text */
      text-transform: capitalize !important; /* first letter cap only */
      letter-spacing: 0.5px !important; /* add character spacing */
      opacity: 0.9; /* slightly faded to be less prominent */
    }
    .gm-mobile-mega-section-title::after {
      color: var(--gm-text-primary) !important; /* blue +/- signs */
      font-size: 12px; /* smaller +/- */
    }
  }

  /* Plus/Minus indicator to show expandability */
  .gm-mobile-mega-section-title::after {
    content: '+';
    margin-left: 8px;
    font-size: 14px;
    color: var(--gm-text-accent);
    opacity: 0.9;
    transition: opacity 0.2s ease;
  }
  .gm-mobile-mega-section.open .gm-mobile-mega-section-title::after {
    content: 'âˆ’';
    opacity: 1;
  }

  .gm-mobile-mega-links {
    display: flex;
    flex-direction: column;
    gap: 6px;
    padding-left: 0; /* align with section title */
  }

  /* Collapse sections by default; expand when parent has .open */
  .gm-mobile-mega-section .gm-mobile-mega-links { display: none; }
  .gm-mobile-mega-section.open .gm-mobile-mega-links { display: flex; }

  .gm-mobile-mega-link {
    display: block;
    padding: 10px 0; /* align text with section title */
    color: var(--gm-text-primary);
    text-decoration: none;
    font-size: 14px;
    font-weight: 400;
    border-radius: 10px;
    transition: all 0.3s ease;
    background: transparent; /* remove highlighted containers */
    margin-left: 0; /* align with title */
    position: relative; /* container for label */
  }

  /* Wrap text to compute exact blob width */
  .gm-mobile-mega-label { position: relative; display: inline-block; padding: 0 4px; }
  .gm-mobile-mega-label::before {
    content: "";
    position: absolute;
    inset: -2px 0 -2px 0; /* top/bottom -2px, left/right align to label padding */
    border-radius: 10px;
    background: rgba(230, 57, 97, 0.12);
    opacity: 0;
    transition: opacity 0.2s ease;
    pointer-events: none;
  }

  .gm-mobile-mega-link:hover,
  .gm-mobile-mega-link:focus-visible {
    color: var(--gm-text-primary); /* keep text blue */
    background: transparent; /* use pseudo-element instead */
  }
  .gm-mobile-mega-link:hover .gm-mobile-mega-label::before,
  .gm-mobile-mega-link:focus-visible .gm-mobile-mega-label::before { opacity: 1; }


  .gm-backdrop {
    position: fixed;
    inset: 0;
    z-index: 998;
    background: rgba(0, 0, 0, 0.2);
    backdrop-filter: blur(4px);
    -webkit-backdrop-filter: blur(4px);
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    pointer-events: none;
  }

  .gm-nav[data-mobile-open="true"] ~ .gm-backdrop {
    pointer-events: auto;
  }

  /* Desktop expanded state */
  @media (min-width: 1024px) {
    .gm-nav[data-expanded="true"] .gm-menu-section {
      display: block;
    }

    .gm-nav[data-expanded="true"] .gm-mobile-toggle {
      display: none;
    }
  }

  /* Desktop collapsed state */
  @media (min-width: 1024px) {
    .gm-nav[data-collapsed="true"] {
      width: max-content;
      border-radius: 30px;
      background: var(--gm-cream-bg);
    }

    .gm-nav[data-collapsed="true"] .gm-container {
      padding: 0 24px;
    }

    .gm-nav[data-collapsed="true"] .gm-logo {
      height: 32px;
    }

    .gm-nav[data-collapsed="true"] .gm-menu-section {
      display: none;
    }

    .gm-nav[data-collapsed="true"] .gm-mobile-toggle {
      display: none;
    }

    .gm-nav[data-collapsed="true"] .gm-mega-menu {
      display: none;
    }

    .gm-nav[data-collapsed="true"]:hover {
      width: auto;
      left: 20px;
      right: 20px;
    }

    .gm-nav[data-collapsed="true"]:hover .gm-menu-section {
      display: block;
    }

    .gm-nav[data-collapsed="true"]:hover .gm-logo {
      height: 40px;
    }

    .gm-nav[data-collapsed="true"]:hover .gm-mobile-toggle {
      display: none;
    }

    .gm-nav[data-collapsed="true"]:hover .gm-mega-menu {
      display: block;
    }
  }

  /* Mobile pill shape */
  @media (max-width: 1023px) {
    .gm-nav {
      height: var(--gm-mobile-pill-height);
      width: max-content;
      border-radius: 30px;
    }

    .gm-container {
      padding: 0 16px; /* slightly tighter on mobile */
      gap: 16px;
    }

    .gm-menu-section {
      display: none;
    }

    .gm-logo {
      height: 32px;
    }

    .gm-mega-menu {
      display: none;
    }

    .mega-menu-arrow {
      display: none;
    }
  }

  /* Mobile mega menu responsive */
  @media (max-width: 1023px) {
    .gm-mega-grid {
      grid-template-columns: 1fr;
      gap: 24px;
    }

    .gm-mega-panel {
      padding: 20px;
      margin: 0 20px;
      max-width: calc(100vw - 40px);
      min-width: auto;
    }

    .gm-mega-menu {
      position: fixed;
      top: auto;
      left: 0;
      right: 0;
      transform: none;
      min-width: auto;
      max-width: none;
    }
  }

  /* Mobile menu open states */
  .gm-nav[data-mobile-open="true"] .hamburger-line:nth-child(1) {
    transform: translateY(6px) rotate(45deg);
  }

  .gm-nav[data-mobile-open="true"] .hamburger-line:nth-child(2) {
    opacity: 0;
  }

  .gm-nav[data-mobile-open="true"] .hamburger-line:nth-child(3) {
    transform: translateY(-6px) rotate(-45deg);
  }

  .gm-nav[data-mobile-open="true"] ~ .gm-mobile-menu {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
    pointer-events: auto;
  }

  .gm-nav[data-mobile-open="true"] ~ .gm-backdrop {
    opacity: 1;
    visibility: visible;
    pointer-events: auto;
  }
</style>

<script>
  const nav = document.querySelector('[data-nav]');
  const mobileToggle = nav?.querySelector('[data-mobile-toggle]');
  const mobileMenu = document.querySelector('[data-mobile-menu]');
  const backdrop = document.querySelector('[data-backdrop]');

  const IDLE_DELAY = 7000;
  let idleTimer: ReturnType<typeof setTimeout> | null;
  let hoverTimer: ReturnType<typeof setTimeout> | null;
  // staged collapse for mobile when user scrolls page outside the overlay
  // Defaults; will be overridden per-context
  let STAGE1_DELAY = 3000; // collapse mega column first
  let STAGE2_DELAY = 2000; // then close/hamburger after 2s
  let isInteractingMobileMenu = false;
  let collapseStage1Timer: ReturnType<typeof setTimeout> | null = null;
  let collapseStage2Timer: ReturnType<typeof setTimeout> | null = null;
  let scrollLockY = 0; // remember scroll position when locking body during mobile menu

  function isDesktop() {
    return window.matchMedia('(min-width: 1024px)').matches;
  }

  function cancelIdleTimer() {
    if (idleTimer) {
      clearTimeout(idleTimer);
      idleTimer = null;
    }
  }

  function cancelHoverTimer() {
    if (hoverTimer) {
      clearTimeout(hoverTimer);
      hoverTimer = null;
    }
  }

  function collapseNav() {
    if (!nav || !isDesktop()) return;
    nav.setAttribute('data-collapsed', 'true');
    nav.removeAttribute('data-expanded');
  }

  function expandNav() {
    if (!nav || !isDesktop()) return;
    nav.removeAttribute('data-collapsed');
    nav.setAttribute('data-expanded', 'true');
  }

  function scheduleCollapse(delay = IDLE_DELAY) {
    if (!isDesktop()) return;
    cancelIdleTimer();
    idleTimer = setTimeout(() => {
      // First hide any active mega menus, then collapse nav
      if (activeMenu) {
        activeMenu.classList.remove('show');
        activeMenu = null;
        // Wait a bit then collapse nav
        setTimeout(() => {
          collapseNav();
        }, 1500); // Stay in full nav longer before collapsing
      } else {
        collapseNav();
      }
    }, delay);
  }

  function cancelStagedMobileCollapse() {
    if (collapseStage1Timer) { clearTimeout(collapseStage1Timer); collapseStage1Timer = null; }
    if (collapseStage2Timer) { clearTimeout(collapseStage2Timer); collapseStage2Timer = null; }
  }

  function collapseMobileStage1() {
    // Collapse to left list only
    const panel = document.querySelector('.gm-mobile-panel');
    const megaCol = document.querySelector('[data-mobile-mega-column]');
    panel?.classList.remove('expanded');
    megaCol?.classList.remove('show');
    // Hide any active content panels
    document.querySelectorAll('[data-mobile-mega-content]').forEach((el) => el.classList.remove('active'));
  }

  function scheduleStagedMobileCollapse() {
    cancelStagedMobileCollapse();
    collapseStage1Timer = setTimeout(() => {
      collapseMobileStage1();
      collapseStage2Timer = setTimeout(() => { closeMobileMenu(); }, STAGE2_DELAY);
    }, STAGE1_DELAY);
  }

  function handleScroll() {
    if (!nav) return;
    
    const scrolled = window.scrollY > 50;
    
    if (isDesktop()) {
      if (scrolled) {
        // Check if user is hovering over nav bar, mega menu, or nav items
        const isHoveringNav = nav.matches(':hover');
        const isHoveringMegaMenu = activeMenu && activeMenu.matches(':hover');
        
        if (!isHoveringNav && !isHoveringMegaMenu) {
          // Scroll triggers immediate collapse when not hovering anywhere on nav
          if (activeMenu) {
            // Hide mega menu immediately, then collapse nav
            const megaIndex = Array.from(megaMenus).indexOf(activeMenu);
            const navLink = menuItems[megaIndex]?.querySelector('.gm-menu-link');
            navLink?.classList.remove('mega-active');
            activeMenu.classList.remove('show');
            activeMenu = null;
          }
          collapseNav();
          cancelIdleTimer();
        }
      } else if (!nav.matches(':hover')) {
        expandNav();
        scheduleCollapse();
      }
    }
    
    // Mobile scroll behavior: quick smooth collapse when outside menu
    if (!isDesktop() && nav?.getAttribute('data-mobile-open') === 'true') {
      const hoveringMenu = mobileMenu?.matches(':hover');
      const hoveringNav = nav?.matches(':hover');
      
      if (!hoveringMenu && !hoveringNav && !isInteractingMobileMenu) {
        // Quick smooth collapse when scrolling outside
        const megaOpen = document.querySelector('[data-mobile-mega-column]')?.classList.contains('show');
        
        if (megaOpen) {
          // Quick two-stage: mega â†’ nav â†’ closed (fast & smooth)
          scheduleMobileMegaCollapse();
        } else {
          // Direct close if only nav is open
          setTimeout(() => closeMobileMenu(), 300);
        }
      }
      // If hovering inside, let normal timers handle it
    }
  }

  function openMobileMenu() {
    if (!nav || !mobileMenu) return;
    nav.setAttribute('data-mobile-open', 'true');
    mobileToggle?.setAttribute('aria-expanded', 'true');

    // Always start the auto-close timer when menu opens, regardless of hover state
    scheduleAutoClose();
    cancelStagedMobileCollapse();
  }

  function scheduleAutoClose() {
    cancelHoverTimer();
    // Quick responsive timing for mobile - similar to desktop
    const megaOpen = document.querySelector('[data-mobile-mega-column]')?.classList.contains('show');
    const isHoveringMenu = mobileMenu?.matches(':hover');
    
    let delay = 3000; // Default 3 seconds
    if (isHoveringMenu) {
      delay = megaOpen ? 4000 : 3000; // Inside mega: 4s, inside nav: 3s
    } else {
      delay = 1500; // Outside: quick 1.5s response
    }
    
    hoverTimer = setTimeout(() => {
      if (nav?.getAttribute('data-mobile-open') === 'true') {
        if (megaOpen) {
          // Smooth two-stage collapse: mega â†’ nav â†’ closed
          scheduleMobileMegaCollapse();
        } else {
          closeMobileMenu();
        }
      }
    }, delay);
  }

  function scheduleMobileMegaCollapse() {
    // Stage 1: Collapse mega menu to nav only (quick)
    setTimeout(() => {
      const panel = document.querySelector('.gm-mobile-panel');
      const megaCol = document.querySelector('[data-mobile-mega-column]');
      panel?.classList.remove('expanded');
      megaCol?.classList.remove('show');
      document.querySelectorAll('[data-mobile-mega-content]').forEach(el => el.classList.remove('active'));
      document.querySelectorAll('[data-mobile-mega-toggle]').forEach(toggle => toggle.classList.remove('selected'));
      
      // Stage 2: Close entire menu after brief pause (smooth)
      setTimeout(() => {
        closeMobileMenu();
      }, 600); // 0.6s pause between stages (quicker for scroll)
    }, 100); // 0.1s delay before starting collapse (faster)
  }

  function closeMobileMenu() {
    if (!nav || !mobileMenu) return;
    nav.removeAttribute('data-mobile-open');
    mobileToggle?.setAttribute('aria-expanded', 'false');
    cancelHoverTimer();
    cancelStagedMobileCollapse();
  }

  function toggleMobileMenu() {
    if (nav?.getAttribute('data-mobile-open') === 'true') {
      closeMobileMenu();
    } else {
      openMobileMenu();
    }
  }

  function handleKeydown(e: KeyboardEvent) {
    if (e.key === 'Escape') {
      closeMobileMenu();
    }
  }

  function handleResize() {
    if (isDesktop()) {
      closeMobileMenu();
      if (window.scrollY <= 50) {
        expandNav();
        scheduleCollapse();
      } else {
        collapseNav();
      }
    } else {
      nav?.removeAttribute('data-collapsed');
      nav?.removeAttribute('data-expanded');
    }
  }

  function init() {
    handleResize();
    handleScroll();
  }

  // Event listeners
  window.addEventListener('scroll', handleScroll, { passive: true });
  window.addEventListener('resize', handleResize);
  document.addEventListener('keydown', handleKeydown);
  
  mobileToggle?.addEventListener('click', toggleMobileMenu);
  backdrop?.addEventListener('click', closeMobileMenu);
  
  // Remove mobile hover-to-open; open via tap/click only

  // Desktop hover behavior
  if (nav) {
    nav.addEventListener('mouseenter', () => {
      if (isDesktop()) {
        cancelIdleTimer();
        if (nav.getAttribute('data-collapsed') === 'true') {
          expandNav();
        }
      }
    });

    nav.addEventListener('mouseleave', () => {
      if (isDesktop()) {
        // If there's an active mega menu, hide it first with same timing
        if (activeMenu) {
          hideMegaMenu(1000); // 1 second for two-stage transition
        } else {
          scheduleCollapse(1000); // 1 second direct collapse if no mega menu
        }
      }
    });
  }

  // Mobile menu hover behavior - only pause timer when hovering over menu items
  if (mobileMenu) {
    mobileMenu.addEventListener('mouseenter', () => {
      if (!isDesktop()) {
        isInteractingMobileMenu = true;
        cancelHoverTimer();
        cancelStagedMobileCollapse();
      }
    });

    mobileMenu.addEventListener('mouseleave', () => {
      if (!isDesktop()) {
        isInteractingMobileMenu = false;
        scheduleAutoClose();
      }
    });

    mobileMenu.addEventListener('click', (e) => {
      const target = e.target as Element | null;
      if (target && target.closest('a')) {
        closeMobileMenu();
      }
    });

    // While the user scrolls or touches inside the mobile panel, keep it open
    const pauseAutoClose = () => { if (!isDesktop()) { isInteractingMobileMenu = true; cancelHoverTimer(); cancelStagedMobileCollapse(); } };
    const resumeAutoClose = () => { if (!isDesktop()) { isInteractingMobileMenu = false; scheduleAutoClose(); } };
    mobileMenu.addEventListener('wheel', pauseAutoClose, { passive: true });
    mobileMenu.addEventListener('touchstart', pauseAutoClose, { passive: true });
    mobileMenu.addEventListener('touchmove', pauseAutoClose, { passive: true });
    mobileMenu.addEventListener('touchend', resumeAutoClose, { passive: true });
  }


  // Visibility change handler
  document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
      closeMobileMenu();
      if (nav && isDesktop()) {
        collapseNav();
      }
    }
  });

  // Initialize
  init();

  // Handle mega menu hover interactions
  const menuItems = document.querySelectorAll('.gm-menu-item[data-mega-menu]');
  const megaMenus = document.querySelectorAll('.gm-mega-menu');
  let activeMenu: HTMLElement | null = null;
  let menuTimer: ReturnType<typeof setTimeout> | null = null;

  function showMegaMenu(megaMenu: HTMLElement) {
    if (menuTimer) clearTimeout(menuTimer);
    
    // Find the nav link associated with this mega menu
    const megaIndex = Array.from(megaMenus).indexOf(megaMenu);
    const navLink = menuItems[megaIndex]?.querySelector('.gm-menu-link');
    
    // If switching between mega menus, do a smooth cross-fade
    if (activeMenu && activeMenu !== megaMenu) {
      // Remove highlight from previous nav link
      const prevIndex = Array.from(megaMenus).indexOf(activeMenu);
      const prevNavLink = menuItems[prevIndex]?.querySelector('.gm-menu-link');
      prevNavLink?.classList.remove('mega-active');
      
      // Show new menu first (immediate)
      megaMenu.classList.add('show');
      navLink?.classList.add('mega-active');
      
      // Then hide the previous menu after a short delay
      const oldMenu = activeMenu;
      setTimeout(() => {
        oldMenu.classList.remove('show');
      }, 150);
      
      activeMenu = megaMenu;
      return;
    }
    
    // Show current mega menu (first time or same menu)
    megaMenu.classList.add('show');
    navLink?.classList.add('mega-active');
    activeMenu = megaMenu;
  }

  function hideMegaMenu(delay = 5000) {
    if (menuTimer) clearTimeout(menuTimer);
    
    menuTimer = setTimeout(() => {
      if (activeMenu) {
        // Remove highlight from nav link
        const megaIndex = Array.from(megaMenus).indexOf(activeMenu);
        const navLink = menuItems[megaIndex]?.querySelector('.gm-menu-link');
        navLink?.classList.remove('mega-active');
        
        // Hide mega menu first
        activeMenu.classList.remove('show');
        activeMenu = null;
        
        // Then wait and collapse nav if conditions are met
        setTimeout(() => {
          if (nav && !nav.matches(':hover') && window.scrollY > 50) {
            collapseNav();
          }
        }, 2000);
      }
    }, delay);
  }

  function cancelHide() {
    if (menuTimer) {
      clearTimeout(menuTimer);
      menuTimer = null;
    }
  }

  menuItems.forEach((item, index) => {
    const megaMenu = megaMenus[index] as HTMLElement;
    if (!megaMenu) return;

    item.addEventListener('mouseenter', () => {
      if (!isDesktop() || nav?.getAttribute('data-expanded') !== 'true') return;
      showMegaMenu(megaMenu);
    });

    item.addEventListener('mouseleave', () => {
      if (!isDesktop()) return;
      hideMegaMenu(1000); // 1 second when leaving nav item
    });

    // Keep mega menu open when hovering over it
    megaMenu.addEventListener('mouseenter', () => {
      cancelHide();
    });

    megaMenu.addEventListener('mouseleave', () => {
      hideMegaMenu(1300); // 1.3 seconds when leaving mega menu
    });
  });

  // Handle mobile two-column mega menus
  const mobileMegaToggles = document.querySelectorAll('[data-mobile-mega-toggle]');
  const mobilePanel = document.querySelector('.gm-mobile-panel');
  const mobileMegaColumn = document.querySelector('[data-mobile-mega-column]');
  
  mobileMegaToggles.forEach(toggle => {
    toggle.addEventListener('click', (e) => {
      e.preventDefault();
      
      const targetLabel = toggle.getAttribute('data-mobile-mega-toggle');
      const megaContent = document.querySelector(`[data-mobile-mega-content="${targetLabel}"]`);
      
      // Check if this mega menu is already active
      const isCurrentlyActive = toggle.classList.contains('selected');
      
      // Remove selected state from all toggles
      mobileMegaToggles.forEach(t => t.classList.remove('selected'));
      
      // Hide all mega contents
      document.querySelectorAll('[data-mobile-mega-content]').forEach(content => {
        content.classList.remove('active');
      });
      
      if (!isCurrentlyActive && megaContent) {
        // Expand the panel and show the mega menu
        mobilePanel?.classList.add('expanded');
        mobileMegaColumn?.classList.add('show');
        toggle.classList.add('selected');
        megaContent.classList.add('active');
      } else {
        // Collapse the panel
        mobilePanel?.classList.remove('expanded');
        mobileMegaColumn?.classList.remove('show');
      }
    });
  });

  // Close mega menu when clicking on a mega link
  document.querySelectorAll('.gm-mobile-mega-link').forEach(link => {
    link.addEventListener('click', () => {
      mobilePanel?.classList.remove('expanded');
      mobileMegaColumn?.classList.remove('show');
      mobileMegaToggles.forEach(t => t.classList.remove('selected'));
      document.querySelectorAll('[data-mobile-mega-content]').forEach(content => {
        content.classList.remove('active');
      });
    });
  });

  // Expand/collapse sections inside the mobile mega content when tapping titles
  document.querySelectorAll('[data-mobile-mega-content]').forEach(content => {
    content.querySelectorAll('.gm-mobile-mega-section').forEach(section => {
      const title = section.querySelector('.gm-mobile-mega-section-title');
      if (!title) return;
      title.addEventListener('click', () => {
        section.classList.toggle('open');
      });
    });
  });


</script>
