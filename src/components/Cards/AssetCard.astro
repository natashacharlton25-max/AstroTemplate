---
// AssetCard.astro - Reusable asset card with animated rainbow border
export interface Props {
  tag: string;
  title: string;
  description: string;
  plusUrl?: string;
  downloadUrl?: string;
  copyUrl?: string;
  shareUrl?: string;
  className?: string;
  borderWidth?: string;
  borderRadius?: string;
}

const {
  tag,
  title,
  description,
  plusUrl = "#",
  downloadUrl = "#",
  copyUrl = "#",
  shareUrl = "#",
  className = "",
  borderWidth = "7px",
  borderRadius = "32px"
} = Astro.props;
---

<div class={`asset-card-wrapper ${className}`}
     style={`--border-width: ${borderWidth}; --border-radius: ${borderRadius};`}
     tabindex="0">
  <div class="rainbow-border">
    <div class="card">
      <div class="tag">{tag}</div>
      <h2 class="title">{title}</h2>
      <p class="description">{description}</p>

      <div class="action-group">
        {plusUrl !== "#" && (
          <a href={plusUrl} class="button-circle" target="_blank" title="Open">
            <i class="fas fa-plus"></i>
          </a>
        )}
        {downloadUrl !== "#" && (
          <button class="button-circle download-btn" data-url={downloadUrl} title="Download">
            <i class="fas fa-download"></i>
          </button>
        )}
        {copyUrl !== "#" && (
          <button class="button-circle copy-btn" data-url={copyUrl} title="Copy Link">
            <i class="fas fa-link"></i>
          </button>
        )}
        {shareUrl !== "#" && (
          <div class="share-container">
            <button class="button-circle share-btn" title="Share">
              <i class="fas fa-share-alt"></i>
            </button>
            <div class="share-options">
              <a class="button-circle"
                 href={`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}`}
                 target="_blank"
                 title="Share on Facebook">
                <i class="fab fa-facebook-f"></i>
              </a>
              <a class="button-circle"
                 href={`https://twitter.com/intent/tweet?url=${encodeURIComponent(shareUrl)}`}
                 target="_blank"
                 title="Share on Twitter">
                <i class="fab fa-twitter"></i>
              </a>
              <a class="button-circle"
                 href={`https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(shareUrl)}`}
                 target="_blank"
                 title="Share on LinkedIn">
                <i class="fab fa-linkedin-in"></i>
              </a>
              <a class="button-circle"
                 href={`https://api.whatsapp.com/send?text=${encodeURIComponent(shareUrl)}`}
                 target="_blank"
                 title="Share on WhatsApp">
                <i class="fab fa-whatsapp"></i>
              </a>
            </div>
          </div>
        )}
      </div>
    </div>
  </div>
</div>

<style>
  .asset-card-wrapper {
    --angle: 0deg;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    max-width: 1100px;
  }

  .rainbow-border {
    padding: var(--border-width);
    border-radius: var(--border-radius);
    background: var(--color-secondary);
    width: 100%;
    min-height: 400px;
    box-sizing: border-box;
    display: flex;
    align-items: stretch;
    justify-content: stretch;
    position: relative;
    transition: background 0.5s;
  }

  .rainbow-border.animated {
    background: conic-gradient(
      from var(--angle),
      var(--color-primary) 0%,
      var(--color-background) 33%,
      var(--color-secondary) 66%,
      var(--color-primary) 100%
    );
    transition: none;
  }

  .rainbow-border.transitioning {
    transition: background 0.7s cubic-bezier(.44,1.27,.68,1.01);
  }

  .rainbow-border.red {
    background: var(--color-primary) !important;
    transition: background 0.7s cubic-bezier(.44,1.27,.68,1.01);
  }

  .card {
    background: var(--color-background);
    border-radius: calc(var(--border-radius) - var(--border-width));
    width: 100%;
    min-height: 100%;
    padding: 45px;
    position: relative;
    box-sizing: border-box;
    z-index: 1;
    overflow: visible;
    box-shadow: var(--shadow-lg);
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
  }

  .tag {
    position: absolute;
    background-color: var(--color-primary);
    color: var(--color-white);
    left: 40px;
    top: 40px;
    padding: 6px 12px;
    border-radius: var(--radius-sm);
    font-size: var(--text-xs);
    font-weight: var(--font-medium);
    text-transform: uppercase;
    z-index: 2;
    display: inline-block;
  }

  .title {
    margin: 0;
    margin-top: 50px;
    font-size: clamp(1.25rem, 2vw, 1.5rem);
    font-weight: var(--font-medium);
    color: var(--color-secondary);
    text-transform: uppercase;
    width: 100%;
    line-height: var(--leading-tight);
  }

  .description {
    margin-top: var(--space-sm);
    font-size: var(--text-base);
    color: var(--color-text-primary);
    line-height: var(--leading-normal);
    max-width: 95%;
    font-weight: var(--font-light);
    width: 100%;
  }

  .action-group {
    position: absolute;
    left: 40px;
    bottom: 40px;
    display: flex;
    align-items: center;
    gap: var(--space-md);
    z-index: 2;
  }

  .button-circle {
    width: 40px;
    height: 40px;
    font-size: var(--text-lg);
    color: var(--color-secondary);
    background: rgba(255,255,255,0.15);
    border: none;
    border-radius: 50%;
    backdrop-filter: blur(12px);
    box-shadow: var(--shadow-md);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    text-decoration: none;
    overflow: hidden;
    transition: all var(--transition-base);
  }

  .button-circle:hover {
    background: var(--color-primary);
    color: var(--color-white);
    box-shadow: var(--shadow-lg);
    transform: translateY(-2px);
  }

  .share-container {
    position: relative;
  }

  .share-options {
    position: absolute;
    top: 50%;
    left: calc(100% + 16px);
    transform: translateY(-50%);
    display: flex;
    gap: var(--space-md);
    opacity: 0;
    pointer-events: none;
    transition: opacity var(--transition-base);
    z-index: 3;
  }

  .share-options.visible {
    opacity: 1;
    pointer-events: auto;
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .asset-card-wrapper {
      width: 100%;
      padding: 0 var(--space-sm);
    }

    .rainbow-border {
      width: 100%;
      border-radius: var(--radius-lg);
      min-height: unset;
      padding: var(--space-sm);
    }

    .card {
      border-radius: var(--radius-sm);
      min-height: unset;
      padding: 30px var(--space-md) calc(var(--space-xl) * 3) var(--space-md);
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
    }

    .tag {
      position: static;
      margin-top: var(--space-sm);
      margin-bottom: var(--space-lg);
      left: unset;
      top: unset;
      display: block;
      width: max-content;
      margin-left: auto;
      margin-right: auto;
      z-index: 2;
    }

    .title {
      margin-top: 0;
      text-align: center;
      font-size: var(--text-lg);
      width: 100%;
    }

    .description {
      font-size: var(--text-sm);
      margin-top: var(--space-xs);
      max-width: 100%;
      text-align: center;
      width: 100%;
    }

    .action-group {
      position: static;
      width: 100%;
      justify-content: center;
      margin-top: var(--space-xl);
      margin-bottom: 0;
      gap: var(--space-sm);
      flex-wrap: wrap;
    }

    .share-container {
      display: none !important;
    }
  }

  @media (max-width: 430px) {
    .rainbow-border {
      padding: 6px;
      border-radius: 6px;
    }

    .card {
      padding: var(--space-xs) var(--space-sm) var(--space-xl) var(--space-sm);
      border-radius: 3px;
    }

    .title {
      font-size: var(--text-base);
    }

    .description {
      font-size: var(--text-sm);
    }

    .button-circle {
      width: 36px;
      height: 36px;
      font-size: var(--text-base);
    }
  }
</style>

<script>
  // Handle download buttons
  document.addEventListener('click', (e: Event) => {
    const target = e.target as HTMLElement | null;
    if (target && target.closest('.download-btn')) {
      const btn = target.closest('.download-btn') as HTMLElement;
      const url = btn?.dataset?.url;
      if (url && url !== '#') {
        window.open(url, '_blank');
      }
    }
  });

  // Handle copy link buttons
  document.addEventListener('click', (e: Event) => {
    const target = e.target as HTMLElement | null;
    if (target && target.closest('.copy-btn')) {
      const btn = target.closest('.copy-btn') as HTMLElement;
      const url = btn?.dataset?.url;
      if (url && url !== '#') {
        navigator.clipboard.writeText(url)
          .then(() => {
            console.log('Link copied to clipboard');
          })
          .catch(() => {
            const textArea = document.createElement('textarea');
            textArea.value = url;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
          });
      }
    }
  });

  // Handle share button hover
  document.addEventListener('mouseenter', (e: Event) => {
    const target = e.target as HTMLElement | null;
    if (target && target.closest('.share-btn')) {
      const shareContainer = target.closest('.share-container');
      const shareOptions = shareContainer?.querySelector('.share-options') as HTMLElement | null;
      if (shareOptions) {
        shareOptions.classList.add('visible');
      }
    }
  }, true);

  document.addEventListener('mouseleave', (e: Event) => {
    const target = e.target as HTMLElement | null;
    if (target && target.closest('.share-container')) {
      const shareContainer = target.closest('.share-container');
      const shareOptions = shareContainer?.querySelector('.share-options') as HTMLElement | null;
      if (shareOptions) {
        setTimeout(() => {
          const shareBtn = shareContainer?.querySelector('.share-btn:hover');
          if (!shareOptions.matches(':hover') && !shareBtn) {
            shareOptions.classList.remove('visible');
          }
        }, 300);
      }
    }
  }, true);

  // Animated Border Logic
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.asset-card-wrapper').forEach(wrapper => {
      const rainbow = wrapper.querySelector('.rainbow-border');
      let spinning = false, spinFrame, angle = 0, finished = false;

      function startSpinOnce() {
        if (spinning) return;
        spinning = true;
        finished = false;
        angle = 0;
        rainbow.classList.add('animated');
        rainbow.classList.remove('red', 'transitioning');

        function frame() {
          angle += 4; // speed (higher = faster)
          if (angle < 360) {
            rainbow.style.setProperty('--angle', angle + 'deg');
            spinFrame = requestAnimationFrame(frame);
          } else {
            spinning = false;
            finished = true;
            rainbow.classList.remove('animated');
            rainbow.classList.add('transitioning');
            // Let the gradient background stay for one frame
            setTimeout(() => {
              rainbow.classList.remove('transitioning');
              rainbow.classList.add('red');
              rainbow.style.setProperty('--angle', '0deg');
            }, 50); // Short delay before switching to red
          }
        }
        frame();
      }

      function resetBorder() {
        spinning = false;
        finished = false;
        cancelAnimationFrame(spinFrame);
        rainbow.classList.remove('animated', 'red', 'transitioning');
        rainbow.style.setProperty('--angle', '0deg');
      }

      // Desktop hover/focus:
      wrapper.addEventListener('mouseenter', startSpinOnce);
      wrapper.addEventListener('focusin', startSpinOnce);
      wrapper.addEventListener('mouseleave', resetBorder);
      wrapper.addEventListener('focusout', resetBorder);

      // Touch support for mobile/tablet:
      wrapper.addEventListener('touchstart', function(e) {
        startSpinOnce();
        setTimeout(resetBorder, 1900); // fade to red, then auto-reset
      });
    });
  });
</script>