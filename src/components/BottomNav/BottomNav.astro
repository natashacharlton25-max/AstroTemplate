---
// Bottom Navigation Component
import ContactPopup from './contact-form/Contact-Popup.astro';
import SearchPopup from '../Search/SearchPopup.astro';
---

<!-- Settings Tab -->
<div class="settings-tab" data-settings-tab>
  <!-- Expanded Settings Menu -->
  <div class="settings-expanded" data-settings-expanded>
    <!-- Contact -->
    <button class="settings-item" data-action="contact" aria-label="Contact">
      <svg class="settings-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
      </svg>
    </button>
    
    <!-- Home -->
    <button class="settings-item" data-action="home" aria-label="Home">
      <svg class="settings-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
      </svg>
    </button>
    
    <!-- Scroll to Top -->
    <button class="settings-item" data-action="scroll-top" aria-label="Scroll to top">
      <svg class="settings-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
      </svg>
    </button>
    
    <!-- Search -->
    <button class="settings-item" data-action="search" aria-label="Search">
      <svg class="settings-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <circle cx="11" cy="11" r="8"></circle>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m21 21-4.35-4.35"></path>
      </svg>
    </button>
    
    
  </div>
  
  <!-- Plus Icon Tab -->
  <button class="settings-toggle" data-settings-toggle aria-label="Navigation Menu">
    <svg class="settings-plus" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
    </svg>
  </button>
</div>

<!-- Contact Popup -->
<ContactPopup />

<!-- Search Popup -->
<SearchPopup />

<style>
  @import './navigation/settingsNavStyles.css';
  @import './overlays/overlayStyles.css';
</style>

<script>
  import { initBottomNav } from './navigation/bottomNavInit.js';
  import { scrollNavManager } from '../utils/scrollNavigation.js';
  
  // Initialize bottom nav
  initBottomNav();
  
  // Initialize scroll-aware behavior
  document.addEventListener('DOMContentLoaded', () => {
    const settingsTab = document.querySelector('.settings-tab');
    const settingsToggle = document.querySelector('[data-settings-toggle]');
    
    if (settingsTab) {
      // Register the bottom nav element for scroll-aware behavior
      scrollNavManager.registerNavElement(settingsTab as HTMLElement, {
        hideOnScrollDown: true,
        showOnScrollUp: true,
        onHide: () => {
          console.log('🔔 BottomNav onHide: Element should already be hidden naturally');
          // Never auto-unlock locked navigation - locked should stay locked
          // This callback should only fire if element was actually hidden
        },
        onShow: () => {
          console.log('Bottom navigation shown on scroll up');
        }
      });
      
      // Prevent hiding when nav is manually opened
      settingsToggle?.addEventListener('click', () => {
        const isLocking = !(settingsToggle as HTMLElement).classList.contains('active');

        console.log('🔄 Bottom nav toggle triggered:', isLocking ? 'LOCKING' : 'UNLOCKING');

        if (isLocking) {
          // LOCKING: Add force visible class (scroll manager will skip it completely)
          settingsTab.classList.remove('nav-hidden-top', 'nav-hidden-bottom');
          settingsTab.classList.add('nav-force-visible');
          settingsTab.setAttribute('aria-hidden', 'false');

          console.log('🔒 LOCKED - Bottom nav pinned, scroll manager will skip this element');
          console.log('🔒 Bottom nav classes after locking:', settingsTab.className);
        } else {
          // UNLOCKING: Enable scroll behavior and remove force visible
          console.log('🔓 UNLOCKING - Restoring scroll behavior for bottom nav');
          console.log('🔓 Bottom nav classes before unlock:', settingsTab.className);

          settingsTab.classList.remove('nav-force-visible');
          console.log('🔓 Bottom nav classes after removing nav-force-visible:', settingsTab.className);

          // No need to call enableScrollBehavior since we're using early return approach

          // Immediately check if we should hide based on current scroll state
          const isScrollingDown = scrollNavManager.getScrollDirection() === 'down';
          if (isScrollingDown && window.scrollY > scrollNavManager.scrollThreshold) {
            console.log('📜 Scroll down detected - hiding bottom nav immediately');
            // Hide immediately since user is scrolling down
            setTimeout(() => {
              scrollNavManager.hideElement(settingsTab as HTMLElement);
            }, 50); // Small delay for unlock animation
          } else {
            console.log('📜 Scroll up or at top - keeping bottom nav visible');
          }
        }
      });
      
      // Remove force visible when clicking outside expanded menu
      document.addEventListener('click', (e) => {
        const expandedMenu = document.querySelector('.settings-expanded');
        const target = e.target as Node | null;
        if (expandedMenu && target && !settingsTab.contains(target) && settingsTab.classList.contains('active')) {
          console.log('🖱️ Outside click - unlocking bottom nav');

          settingsTab.classList.remove('nav-force-visible');
          // No need to call enableScrollBehavior since we're using early return approach

          // Check if we should hide it immediately based on current scroll state
          const isScrollingDown = scrollNavManager.getScrollDirection() === 'down';
          if (isScrollingDown && window.scrollY > scrollNavManager.scrollThreshold) {
            console.log('📜 Outside click + scroll down - hiding bottom nav immediately');
            setTimeout(() => {
              scrollNavManager.hideElement(settingsTab as HTMLElement);
            }, 50);
          }
        }
      });
      
      // Keep nav visible when hovering over it (only if already locked)
      settingsTab.addEventListener('mouseenter', () => {
        if (settingsToggle?.classList.contains('active')) {
          settingsTab.classList.add('nav-force-visible');
        }
      });

      settingsTab.addEventListener('mouseleave', () => {
        if (!settingsToggle?.classList.contains('active')) {
          settingsTab.classList.remove('nav-force-visible');
        }
      });
    }
  });
</script>
