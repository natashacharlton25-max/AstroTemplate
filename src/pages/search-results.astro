---
import Layout from '@layouts/Layout.astro';
---

<Layout>
  <main class="search-results-page" style="position: relative;">
    <!-- Page Header -->
    <section class="page-header">
      <div class="page-header-content">
        <h1>Search Results</h1>
      </div>
    </section>

    <!-- Search Results Content -->
    <div class="search-results-header">
      <div class="container content-aligned">
        <div class="search-info">
          <span id="searchQuery" class="search-query"></span>
          <span id="searchCount" class="search-count"></span>
        </div>
        
        <!-- Search Again Bar -->
        <div class="search-again-container">
          <div class="search-input-container">
            <svg class="search-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m21 21-6-6m2-5a7 7 0 1 1-14 0 7 7 0 0 1 14 0Z"></path>
            </svg>
            <input
              type="text"
              id="searchAgainInput"
              placeholder="Search again..."
              class="search-input"
              autocomplete="off"
            />
            <button id="clearSearchAgain" class="clear-search-btn" style="display: none;">
              âœ•
            </button>
          </div>
          <button id="searchAgainBtn" class="search-btn">
            Search
          </button>
        </div>
      </div>
    </div>

    <!-- Search Results Content -->
    <div class="search-results-content">
      <div class="container">
        <!-- Loading State -->
        <div id="loadingState" class="loading-state" style="display: none;">
          <div class="loading-spinner"></div>
          <p>Searching...</p>
        </div>

        <!-- Results Container -->
        <div id="resultsContainer" class="results-container">
          <!-- Results will be populated by JavaScript -->
        </div>

        <!-- No Results State -->
        <div id="noResultsState" class="no-results" style="display: none;">
          <h2>No results found</h2>
          <p>Try adjusting your search terms or browse our content below.</p>
          
          <!-- Popular Content Suggestions -->
          <div class="suggestions-section">
            <h3>Popular Content</h3>
            <div class="suggestions-grid">
              <a href="/about" class="suggestion-card">
                <h4>About Us</h4>
                <p>Learn about our mission and values</p>
              </a>
              <a href="/services" class="suggestion-card">
                <h4>Services</h4>
                <p>Discover what we can do for you</p>
              </a>
              <a href="/portfolio" class="suggestion-card">
                <h4>Portfolio</h4>
                <p>See our best work and projects</p>
              </a>
              <a href="/contact" class="suggestion-card">
                <h4>Contact</h4>
                <p>Get in touch with us</p>
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
/* Search Results Page Styles */
.search-results-page {
  background: var(--brand-background);
  padding-top: 80px;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}

/* Search Results Header */
.search-results-header {
  background: linear-gradient(135deg, var(--brand-secondary) 0%, var(--brand-navy-light) 100%);
  padding: 40px 0;
  color: var(--brand-text-light);
}

.search-results-header h1 {
  font-size: 42px;
  font-weight: 700;
  margin-bottom: 16px;
  font-family: var(--font-heading);
  color: var(--brand-background);
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

.search-info {
  display: flex;
  gap: 20px;
  align-items: center;
  margin-bottom: 32px;
  flex-wrap: wrap;
}

.search-query {
  font-size: 18px;
  font-weight: 500;
}

.search-count {
  font-size: 14px;
  opacity: 0.8;
}

/* Search Again Container */
.search-again-container {
  display: flex;
  gap: 16px;
  align-items: center;
  max-width: 600px;
}

.search-input-container {
  flex: 1;
  position: relative;
  display: flex;
  align-items: center;
}

.search-icon {
  position: absolute;
  left: 16px;
  width: 20px;
  height: 20px;
  color: var(--brand-text-light);
  opacity: 0.7;
  z-index: 1;
}

.search-input {
  width: 100%;
  padding: 16px 16px 16px 48px;
  background: rgba(255, 255, 255, 0.1);
  border: 2px solid rgba(255, 255, 255, 0.2);
  border-radius: 16px;
  color: var(--brand-text-light);
  font-size: 16px;
  font-family: var(--font-body);
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
}

.search-input::placeholder {
  color: rgba(255, 255, 255, 0.6);
}

.search-input:focus {
  outline: none;
  border-color: var(--brand-primary);
  background: rgba(255, 255, 255, 0.15);
  box-shadow: 0 0 0 3px rgba(230, 57, 97, 0.3);
}

.clear-search-btn {
  position: absolute;
  right: 12px;
  width: 28px;
  height: 28px;
  background: rgba(255, 255, 255, 0.2);
  border: none;
  border-radius: 50%;
  color: var(--brand-text-light);
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 14px;
  transition: all 0.2s ease;
}

.clear-search-btn:hover {
  background: rgba(255, 255, 255, 0.3);
}

.search-btn {
  padding: 16px 24px;
  background: var(--brand-primary);
  border: none;
  border-radius: 16px;
  color: var(--brand-text-light);
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  font-family: var(--font-body);
  flex-shrink: 0;
}

.search-btn:hover {
  background: color-mix(in srgb, var(--brand-primary) 90%, black);
  transform: translateY(-2px);
}

/* Search Results Content */
.search-results-content {
  padding: 40px 0;
  background: var(--brand-background);
  min-height: 100vh;
}

/* Results Container */
.results-container {
  display: grid;
  gap: 32px;
}

a.result-item,
a.result-item:link,
a.result-item:visited {
  background: var(--brand-background);
  border: 1px solid rgba(24, 78, 119, 0.1);
  border-radius: 16px;
  padding: 24px;
  transition: all 0.2s ease;
  text-decoration: none;
  color: var(--brand-text) !important;
  display: block;
}

a.result-item * {
  color: inherit !important;
}

/* Additional specificity for any stubborn link colors */
.search-results-page a.result-item,
.search-results-page a.result-item *,
.search-results-page .result-url {
  color: var(--brand-text) !important;
}

.search-results-page .result-title {
  color: var(--brand-secondary) !important;
}

a.result-item:hover {
  border-color: var(--brand-text);
  background: var(--brand-highlight-bg);
  transform: translateY(-2px);
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
}

.result-title {
  color: var(--brand-secondary);
  font-size: 20px;
  font-weight: 600;
  margin-bottom: 12px;
  font-family: var(--font-heading);
}

.result-description {
  color: var(--brand-text);
  font-size: 16px;
  line-height: 1.6;
  margin-bottom: 12px;
}

.result-meta {
  display: flex;
  gap: 16px;
  font-size: 14px;
  color: var(--brand-text);
  opacity: 0.8;
}

a.result-item .result-url,
.results-container .result-url,
span.result-url {
  color: var(--brand-text) ;
  font-size: 12px;
  text-decoration: none;
  opacity: 0.8;
  text-transform: uppercase;
  letter-spacing: 1px;
  font-weight: 500;
  font-family: 'Poppins', sans-serif;
}

/* Loading State */
.loading-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 80px 20px;
  color: var(--brand-secondary);
}

.loading-spinner {
  width: 40px;
  height: 40px;
  border: 3px solid rgba(24, 78, 119, 0.1);
  border-top: 3px solid var(--brand-secondary);
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 16px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* No Results State */
.no-results {
  text-align: center;
  padding: 80px 20px;
  color: var(--brand-secondary);
}

.no-results h2 {
  font-size: 28px;
  font-weight: 600;
  margin-bottom: 16px;
  font-family: var(--font-heading);
}

.no-results p {
  font-size: 16px;
  opacity: 0.8;
  margin-bottom: 40px;
  max-width: 500px;
  margin-left: auto;
  margin-right: auto;
}

/* Suggestions Section */
.suggestions-section {
  margin-top: 60px;
}

.suggestions-section h3 {
  font-size: 24px;
  font-weight: 600;
  margin-bottom: 24px;
  font-family: var(--font-heading);
  color: var(--brand-secondary);
  text-align: left;
}

.suggestions-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
}

.suggestion-card {
  background: var(--brand-background);
  border: 1px solid rgba(24, 78, 119, 0.1);
  border-radius: 16px;
  padding: 24px;
  text-decoration: none;
  color: inherit;
  transition: all 0.2s ease;
  text-align: left;
}

.suggestion-card:hover {
  border-color: var(--brand-primary);
  background: var(--brand-highlight-bg);
  transform: translateY(-2px);
}

.suggestion-card h4 {
  color: var(--brand-secondary);
  font-size: 18px;
  font-weight: 600;
  margin-bottom: 8px;
  font-family: var(--font-heading);
}

.suggestion-card p {
  color: var(--brand-secondary);
  opacity: 0.8;
  font-size: 14px;
  line-height: 1.5;
  margin: 0;
}

/* Search term highlighting - handled by global brand.css */

/* Mobile Responsive */
@media (max-width: 768px) {
  .search-results-page {
    padding-top: 60px;
  }
  
  .search-results-header {
    padding: 30px 0;
  }
  
  .search-results-header h1 {
    font-size: 24px;
  }
  
  .search-again-container {
    flex-direction: column;
    align-items: stretch;
  }
  
  .search-input {
    font-size: 16px;
  }
  
  .suggestions-grid {
    grid-template-columns: 1fr;
  }
}

@media (max-width: 480px) {
  .search-results-content {
    padding: 20px 0;
  }
  
  .result-item, .suggestion-card {
    padding: 20px;
  }
  
  .no-results {
    padding: 60px 20px;
  }
}
</style>

<script>
// Get URL parameters
const urlParams = new URLSearchParams(window.location.search);
const query = urlParams.get('q') || '';
const category = urlParams.get('category') || 'all';

// Update page content based on search parameters
document.addEventListener('DOMContentLoaded', function() {
  const searchQueryElement = document.getElementById('searchQuery');
  const searchAgainInput = document.getElementById('searchAgainInput') as HTMLInputElement;
  const searchAgainBtn = document.getElementById('searchAgainBtn');
  const clearSearchAgain = document.getElementById('clearSearchAgain');
  
  // Set initial values
  if (query) {
    if (searchQueryElement) searchQueryElement.textContent = `Results for "${query}"`;
    if (searchAgainInput) searchAgainInput.value = query;
    performSearch(query, category);
  } else {
    // Show no results if no query
    showNoResults();
  }
  
  // Search again functionality
  function performNewSearch() {
    if (!searchAgainInput) return;
    const newQuery = searchAgainInput.value?.trim();
    if (newQuery) {
      window.location.href = `/search-results?q=${encodeURIComponent(newQuery)}&category=all`;
    }
  }
  
  if (searchAgainBtn) {
    searchAgainBtn.addEventListener('click', performNewSearch);
  }
  
  if (searchAgainInput) {
    searchAgainInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        performNewSearch();
      }
    });
    
    // Clear search functionality
    searchAgainInput.addEventListener('input', function() {
      if (clearSearchAgain) {
        clearSearchAgain.style.display = (this as HTMLInputElement).value ? 'flex' : 'none';
      }
    });
    
    // Show clear button if there's initial content
    if (searchAgainInput.value && clearSearchAgain) {
      clearSearchAgain.style.display = 'flex';
    }
  }
  
  if (clearSearchAgain) {
    clearSearchAgain.addEventListener('click', function() {
      if (searchAgainInput) {
        searchAgainInput.value = '';
        searchAgainInput.focus();
      }
      clearSearchAgain.style.display = 'none';
    });
  }
});

async function performSearch(query: string, category = 'all') {
  const loadingState = document.getElementById('loadingState');
  const resultsContainer = document.getElementById('resultsContainer');
  const noResultsState = document.getElementById('noResultsState');
  const searchCount = document.getElementById('searchCount');
  
  // Show loading state
  if (loadingState) loadingState.style.display = 'flex';
  if (resultsContainer) resultsContainer.style.display = 'none';
  if (noResultsState) noResultsState.style.display = 'none';
  
  try {
    const response = await fetch(`/api/search?q=${encodeURIComponent(query)}&category=${category}`);
    const data = await response.json();
    
    // Hide loading state
    if (loadingState) loadingState.style.display = 'none';
    
    if (data.results && data.results.length > 0) {
      // Show results
      displayResults(data.results);
      if (searchCount) searchCount.textContent = `${data.results.length} result${data.results.length === 1 ? '' : 's'}`;
      if (resultsContainer) resultsContainer.style.display = 'grid';
    } else {
      // Show no results
      showNoResults();
    }
  } catch (error) {
    console.error('Search error:', error);
    if (loadingState) loadingState.style.display = 'none';
    showNoResults();
  }
}

/**
 * @param {Array<{title: string, description: string, url: string, type?: string}>} results
 */
/**
 * @param {Array<{title: string, description: string, url: string, type?: string}>} results
 */
function displayResults(results: Array<{title: string, description: string, url: string, type?: string}>) {
  const container = document.getElementById('resultsContainer');
  
  if (!container) {
    console.error('Results container not found');
    return;
  }
  
  container.innerHTML = results.map(result => `
    <a href="${result.url}" class="result-item">
      <h2 class="result-title">${highlightSearchTerm(result.title)}</h2>
      <p class="result-description">${highlightSearchTerm(result.description)}</p>
      <div class="result-meta">
        <span class="result-type">${result.type || 'content'}</span>
        <span class="result-url">${result.url}</span>
      </div>
    </a>
  `).join('');
}

function showNoResults() {
  const loadingState = document.getElementById('loadingState');
  const resultsContainer = document.getElementById('resultsContainer');
  const noResultsState = document.getElementById('noResultsState');
  const searchCount = document.getElementById('searchCount');
  
  if (loadingState) loadingState.style.display = 'none';
  if (resultsContainer) resultsContainer.style.display = 'none';
  if (noResultsState) noResultsState.style.display = 'block';
  if (searchCount) searchCount.textContent = '0 results';
}

function highlightSearchTerm(text: string) {
  const urlParams = new URLSearchParams(window.location.search);
  const query = urlParams.get('q');
  
  if (!query) return text;
  
  // Use word boundary to highlight complete words that contain the search term
  const regex = new RegExp(`\\b(\\w*${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\w*)`, 'gi');
  return text.replace(regex, '<mark>$1</mark>');
}
</script>